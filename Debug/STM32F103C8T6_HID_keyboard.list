
STM32F103C8T6_HID_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000304c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  08003200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008c4  200000fc  080032fc  000200fc  2**2
                  ALLOC
  7 ._user_heap_stack 00004200  200009c0  080032fc  000209c0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000158e4  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e8d  00000000  00000000  00035a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005118  00000000  00000000  00038896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000920  00000000  00000000  0003d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009a0  00000000  00000000  0003e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000054bd  00000000  00000000  0003ec70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002adf  00000000  00000000  0004412d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046c0c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014bc  00000000  00000000  00046c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003140 	.word	0x08003140

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08003140 	.word	0x08003140

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <HAL_InitTick+0x24>)
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <HAL_InitTick+0x28>)
 8000156:	fba3 3000 	umull	r3, r0, r3, r0
 800015a:	0980      	lsrs	r0, r0, #6
 800015c:	f000 f88e 	bl	800027c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f84a 	bl	8000200 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200000c4 	.word	0x200000c4
 8000174:	10624dd3 	.word	0x10624dd3

08000178 <HAL_Init>:
{
 8000178:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017a:	4a07      	ldr	r2, [pc, #28]	; (8000198 <HAL_Init+0x20>)
 800017c:	6813      	ldr	r3, [r2, #0]
 800017e:	f043 0310 	orr.w	r3, r3, #16
 8000182:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000184:	2003      	movs	r0, #3
 8000186:	f000 f829 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800018a:	2000      	movs	r0, #0
 800018c:	f7ff ffde 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 8000190:	f002 fd64 	bl	8002c5c <HAL_MspInit>
}
 8000194:	2000      	movs	r0, #0
 8000196:	bd08      	pop	{r3, pc}
 8000198:	40022000 	.word	0x40022000

0800019c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800019c:	4a02      	ldr	r2, [pc, #8]	; (80001a8 <HAL_IncTick+0xc>)
 800019e:	6813      	ldr	r3, [r2, #0]
 80001a0:	3301      	adds	r3, #1
 80001a2:	6013      	str	r3, [r2, #0]
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000130 	.word	0x20000130

080001ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001ac:	4b01      	ldr	r3, [pc, #4]	; (80001b4 <HAL_GetTick+0x8>)
 80001ae:	6818      	ldr	r0, [r3, #0]
}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000130 	.word	0x20000130

080001b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b8:	b530      	push	{r4, r5, lr}
 80001ba:	b083      	sub	sp, #12
 80001bc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001be:	f7ff fff5 	bl	80001ac <HAL_GetTick>
 80001c2:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001c4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ca:	d000      	beq.n	80001ce <HAL_Delay+0x16>
  {
     wait++;
 80001cc:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001ce:	f7ff ffed 	bl	80001ac <HAL_GetTick>
 80001d2:	1b40      	subs	r0, r0, r5
 80001d4:	42a0      	cmp	r0, r4
 80001d6:	d3fa      	bcc.n	80001ce <HAL_Delay+0x16>
  {
  }
}
 80001d8:	b003      	add	sp, #12
 80001da:	bd30      	pop	{r4, r5, pc}

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e4:	041b      	lsls	r3, r3, #16
 80001e6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e8:	0200      	lsls	r0, r0, #8
 80001ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ee:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001f0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001f4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001f8:	60d0      	str	r0, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000200:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <HAL_NVIC_SetPriority+0x5c>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c3 0407 	rsb	r4, r3, #7
 800020e:	2c04      	cmp	r4, #4
 8000210:	bf28      	it	cs
 8000212:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	1d1d      	adds	r5, r3, #4
 8000216:	2d06      	cmp	r5, #6
 8000218:	d917      	bls.n	800024a <HAL_NVIC_SetPriority+0x4a>
 800021a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021c:	2501      	movs	r5, #1
 800021e:	fa05 f404 	lsl.w	r4, r5, r4
 8000222:	3c01      	subs	r4, #1
 8000224:	4021      	ands	r1, r4
 8000226:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000228:	fa05 f303 	lsl.w	r3, r5, r3
 800022c:	3b01      	subs	r3, #1
 800022e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000232:	2800      	cmp	r0, #0
 8000234:	db0b      	blt.n	800024e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000236:	0109      	lsls	r1, r1, #4
 8000238:	b2c9      	uxtb	r1, r1
 800023a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800023e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000242:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000246:	bc30      	pop	{r4, r5}
 8000248:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2300      	movs	r3, #0
 800024c:	e7e6      	b.n	800021c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	f000 000f 	and.w	r0, r0, #15
 8000252:	0109      	lsls	r1, r1, #4
 8000254:	b2c9      	uxtb	r1, r1
 8000256:	4b02      	ldr	r3, [pc, #8]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
 8000258:	5419      	strb	r1, [r3, r0]
 800025a:	e7f4      	b.n	8000246 <HAL_NVIC_SetPriority+0x46>
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	e000ed14 	.word	0xe000ed14

08000264 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000264:	0942      	lsrs	r2, r0, #5
 8000266:	f000 001f 	and.w	r0, r0, #31
 800026a:	2301      	movs	r3, #1
 800026c:	fa03 f000 	lsl.w	r0, r3, r0
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_NVIC_EnableIRQ+0x14>)
 8000272:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100

0800027c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800027c:	3801      	subs	r0, #1
 800027e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000282:	d20a      	bcs.n	800029a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x24>)
 8000286:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
 800028a:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x28>)
 800028c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	2000      	movs	r0, #0
 8000292:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000294:	2207      	movs	r2, #7
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000e010 	.word	0xe000e010
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002a8:	2804      	cmp	r0, #4
 80002aa:	d005      	beq.n	80002b8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80002ae:	6813      	ldr	r3, [r2, #0]
 80002b0:	f023 0304 	bic.w	r3, r3, #4
 80002b4:	6013      	str	r3, [r2, #0]
 80002b6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b8:	4a02      	ldr	r2, [pc, #8]	; (80002c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6013      	str	r3, [r2, #0]
 80002c2:	4770      	bx	lr
 80002c4:	e000e010 	.word	0xe000e010

080002c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c8:	4770      	bx	lr

080002ca <HAL_SYSTICK_IRQHandler>:
{
 80002ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002cc:	f7ff fffc 	bl	80002c8 <HAL_SYSTICK_Callback>
 80002d0:	bd08      	pop	{r3, pc}
	...

080002d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d8:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002da:	4634      	mov	r4, r6
 80002dc:	e071      	b.n	80003c2 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80a1 	beq.w	8000426 <HAL_GPIO_Init+0x152>
 80002e4:	2d01      	cmp	r5, #1
 80002e6:	d100      	bne.n	80002ea <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002e8:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002ea:	2bff      	cmp	r3, #255	; 0xff
 80002ec:	f200 80af 	bhi.w	800044e <HAL_GPIO_Init+0x17a>
 80002f0:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80002f2:	2bff      	cmp	r3, #255	; 0xff
 80002f4:	f200 80ae 	bhi.w	8000454 <HAL_GPIO_Init+0x180>
 80002f8:	00a5      	lsls	r5, r4, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002fa:	f8de 2000 	ldr.w	r2, [lr]
 80002fe:	270f      	movs	r7, #15
 8000300:	40af      	lsls	r7, r5
 8000302:	ea22 0207 	bic.w	r2, r2, r7
 8000306:	fa06 f505 	lsl.w	r5, r6, r5
 800030a:	432a      	orrs	r2, r5
 800030c:	f8ce 2000 	str.w	r2, [lr]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000310:	684a      	ldr	r2, [r1, #4]
 8000312:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000316:	d053      	beq.n	80003c0 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000318:	4a63      	ldr	r2, [pc, #396]	; (80004a8 <HAL_GPIO_Init+0x1d4>)
 800031a:	6995      	ldr	r5, [r2, #24]
 800031c:	f045 0501 	orr.w	r5, r5, #1
 8000320:	6195      	str	r5, [r2, #24]
 8000322:	6992      	ldr	r2, [r2, #24]
 8000324:	f002 0201 	and.w	r2, r2, #1
 8000328:	9201      	str	r2, [sp, #4]
 800032a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800032c:	08a5      	lsrs	r5, r4, #2
 800032e:	1caf      	adds	r7, r5, #2
 8000330:	4a5e      	ldr	r2, [pc, #376]	; (80004ac <HAL_GPIO_Init+0x1d8>)
 8000332:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000336:	f004 0703 	and.w	r7, r4, #3
 800033a:	00bf      	lsls	r7, r7, #2
 800033c:	f04f 0e0f 	mov.w	lr, #15
 8000340:	fa0e fe07 	lsl.w	lr, lr, r7
 8000344:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000348:	f8df e170 	ldr.w	lr, [pc, #368]	; 80004bc <HAL_GPIO_Init+0x1e8>
 800034c:	4570      	cmp	r0, lr
 800034e:	f000 8088 	beq.w	8000462 <HAL_GPIO_Init+0x18e>
 8000352:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000356:	4570      	cmp	r0, lr
 8000358:	f000 8086 	beq.w	8000468 <HAL_GPIO_Init+0x194>
 800035c:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000360:	4570      	cmp	r0, lr
 8000362:	f000 8084 	beq.w	800046e <HAL_GPIO_Init+0x19a>
 8000366:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800036a:	4570      	cmp	r0, lr
 800036c:	d076      	beq.n	800045c <HAL_GPIO_Init+0x188>
 800036e:	f04f 0e04 	mov.w	lr, #4
 8000372:	fa0e f707 	lsl.w	r7, lr, r7
 8000376:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 8000378:	3502      	adds	r5, #2
 800037a:	4f4c      	ldr	r7, [pc, #304]	; (80004ac <HAL_GPIO_Init+0x1d8>)
 800037c:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000380:	684a      	ldr	r2, [r1, #4]
 8000382:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000386:	d075      	beq.n	8000474 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000388:	4d49      	ldr	r5, [pc, #292]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 800038a:	682a      	ldr	r2, [r5, #0]
 800038c:	431a      	orrs	r2, r3
 800038e:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000390:	684a      	ldr	r2, [r1, #4]
 8000392:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000396:	d073      	beq.n	8000480 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000398:	4d45      	ldr	r5, [pc, #276]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 800039a:	686a      	ldr	r2, [r5, #4]
 800039c:	431a      	orrs	r2, r3
 800039e:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003a0:	684a      	ldr	r2, [r1, #4]
 80003a2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80003a6:	d071      	beq.n	800048c <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003a8:	4d41      	ldr	r5, [pc, #260]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 80003aa:	68aa      	ldr	r2, [r5, #8]
 80003ac:	431a      	orrs	r2, r3
 80003ae:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003b0:	684a      	ldr	r2, [r1, #4]
 80003b2:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80003b6:	d06f      	beq.n	8000498 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003b8:	4d3d      	ldr	r5, [pc, #244]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 80003ba:	68ea      	ldr	r2, [r5, #12]
 80003bc:	4313      	orrs	r3, r2
 80003be:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003c0:	3401      	adds	r4, #1
 80003c2:	2c0f      	cmp	r4, #15
 80003c4:	d86e      	bhi.n	80004a4 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 80003c6:	2201      	movs	r2, #1
 80003c8:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ca:	680b      	ldr	r3, [r1, #0]
 80003cc:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d1f6      	bne.n	80003c0 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 80003d2:	684d      	ldr	r5, [r1, #4]
 80003d4:	2d12      	cmp	r5, #18
 80003d6:	d030      	beq.n	800043a <HAL_GPIO_Init+0x166>
 80003d8:	d80b      	bhi.n	80003f2 <HAL_GPIO_Init+0x11e>
 80003da:	2d02      	cmp	r5, #2
 80003dc:	d02a      	beq.n	8000434 <HAL_GPIO_Init+0x160>
 80003de:	f67f af7e 	bls.w	80002de <HAL_GPIO_Init+0xa>
 80003e2:	2d03      	cmp	r5, #3
 80003e4:	d02f      	beq.n	8000446 <HAL_GPIO_Init+0x172>
 80003e6:	2d11      	cmp	r5, #17
 80003e8:	f47f af7f 	bne.w	80002ea <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ec:	68ce      	ldr	r6, [r1, #12]
 80003ee:	3604      	adds	r6, #4
          break;
 80003f0:	e77b      	b.n	80002ea <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80003f2:	4f30      	ldr	r7, [pc, #192]	; (80004b4 <HAL_GPIO_Init+0x1e0>)
 80003f4:	42bd      	cmp	r5, r7
 80003f6:	d016      	beq.n	8000426 <HAL_GPIO_Init+0x152>
 80003f8:	d90c      	bls.n	8000414 <HAL_GPIO_Init+0x140>
 80003fa:	4f2f      	ldr	r7, [pc, #188]	; (80004b8 <HAL_GPIO_Init+0x1e4>)
 80003fc:	42bd      	cmp	r5, r7
 80003fe:	d012      	beq.n	8000426 <HAL_GPIO_Init+0x152>
 8000400:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000404:	42bd      	cmp	r5, r7
 8000406:	d00e      	beq.n	8000426 <HAL_GPIO_Init+0x152>
 8000408:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800040c:	42bd      	cmp	r5, r7
 800040e:	f47f af6c 	bne.w	80002ea <HAL_GPIO_Init+0x16>
 8000412:	e008      	b.n	8000426 <HAL_GPIO_Init+0x152>
 8000414:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000418:	42bd      	cmp	r5, r7
 800041a:	d004      	beq.n	8000426 <HAL_GPIO_Init+0x152>
 800041c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000420:	42bd      	cmp	r5, r7
 8000422:	f47f af62 	bne.w	80002ea <HAL_GPIO_Init+0x16>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000426:	688d      	ldr	r5, [r1, #8]
 8000428:	b17d      	cbz	r5, 800044a <HAL_GPIO_Init+0x176>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800042a:	2d01      	cmp	r5, #1
 800042c:	d008      	beq.n	8000440 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 800042e:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000430:	2608      	movs	r6, #8
 8000432:	e75a      	b.n	80002ea <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000434:	68ce      	ldr	r6, [r1, #12]
 8000436:	3608      	adds	r6, #8
          break;
 8000438:	e757      	b.n	80002ea <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800043a:	68ce      	ldr	r6, [r1, #12]
 800043c:	360c      	adds	r6, #12
          break;
 800043e:	e754      	b.n	80002ea <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000440:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000442:	2608      	movs	r6, #8
 8000444:	e751      	b.n	80002ea <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000446:	2600      	movs	r6, #0
 8000448:	e74f      	b.n	80002ea <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800044a:	2604      	movs	r6, #4
 800044c:	e74d      	b.n	80002ea <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800044e:	f100 0e04 	add.w	lr, r0, #4
 8000452:	e74e      	b.n	80002f2 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000454:	f1a4 0508 	sub.w	r5, r4, #8
 8000458:	00ad      	lsls	r5, r5, #2
 800045a:	e74e      	b.n	80002fa <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800045c:	f04f 0e03 	mov.w	lr, #3
 8000460:	e787      	b.n	8000372 <HAL_GPIO_Init+0x9e>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	e784      	b.n	8000372 <HAL_GPIO_Init+0x9e>
 8000468:	f04f 0e01 	mov.w	lr, #1
 800046c:	e781      	b.n	8000372 <HAL_GPIO_Init+0x9e>
 800046e:	f04f 0e02 	mov.w	lr, #2
 8000472:	e77e      	b.n	8000372 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000474:	4d0e      	ldr	r5, [pc, #56]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 8000476:	682a      	ldr	r2, [r5, #0]
 8000478:	ea22 0203 	bic.w	r2, r2, r3
 800047c:	602a      	str	r2, [r5, #0]
 800047e:	e787      	b.n	8000390 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000480:	4d0b      	ldr	r5, [pc, #44]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 8000482:	686a      	ldr	r2, [r5, #4]
 8000484:	ea22 0203 	bic.w	r2, r2, r3
 8000488:	606a      	str	r2, [r5, #4]
 800048a:	e789      	b.n	80003a0 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800048c:	4d08      	ldr	r5, [pc, #32]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 800048e:	68aa      	ldr	r2, [r5, #8]
 8000490:	ea22 0203 	bic.w	r2, r2, r3
 8000494:	60aa      	str	r2, [r5, #8]
 8000496:	e78b      	b.n	80003b0 <HAL_GPIO_Init+0xdc>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000498:	4d05      	ldr	r5, [pc, #20]	; (80004b0 <HAL_GPIO_Init+0x1dc>)
 800049a:	68ea      	ldr	r2, [r5, #12]
 800049c:	ea22 0303 	bic.w	r3, r2, r3
 80004a0:	60eb      	str	r3, [r5, #12]
 80004a2:	e78d      	b.n	80003c0 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 80004a4:	b003      	add	sp, #12
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000
 80004b0:	40010400 	.word	0x40010400
 80004b4:	10210000 	.word	0x10210000
 80004b8:	10310000 	.word	0x10310000
 80004bc:	40010800 	.word	0x40010800

080004c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004c0:	6883      	ldr	r3, [r0, #8]
 80004c2:	4219      	tst	r1, r3
 80004c4:	d101      	bne.n	80004ca <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80004c6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80004c8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80004ca:	2001      	movs	r0, #1
 80004cc:	4770      	bx	lr

080004ce <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004ce:	b912      	cbnz	r2, 80004d6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004d0:	0409      	lsls	r1, r1, #16
 80004d2:	6101      	str	r1, [r0, #16]
 80004d4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80004d6:	6101      	str	r1, [r0, #16]
 80004d8:	4770      	bx	lr

080004da <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004da:	2800      	cmp	r0, #0
 80004dc:	d066      	beq.n	80005ac <HAL_PCD_Init+0xd2>
{
 80004de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e0:	b087      	sub	sp, #28
 80004e2:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004e4:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004e8:	b1c3      	cbz	r3, 800051c <HAL_PCD_Init+0x42>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ea:	2303      	movs	r3, #3
 80004ec:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004f0:	6820      	ldr	r0, [r4, #0]
 80004f2:	f001 f803 	bl	80014fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004f6:	4625      	mov	r5, r4
 80004f8:	f855 7b10 	ldr.w	r7, [r5], #16
 80004fc:	466e      	mov	r6, sp
 80004fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000502:	682b      	ldr	r3, [r5, #0]
 8000504:	6033      	str	r3, [r6, #0]
 8000506:	1d23      	adds	r3, r4, #4
 8000508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800050a:	4638      	mov	r0, r7
 800050c:	f000 ffe6 	bl	80014dc <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000510:	2100      	movs	r1, #0
 8000512:	6820      	ldr	r0, [r4, #0]
 8000514:	f000 fffc 	bl	8001510 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000518:	2300      	movs	r3, #0
 800051a:	e015      	b.n	8000548 <HAL_PCD_Init+0x6e>
    hpcd->Lock = HAL_UNLOCKED;
 800051c:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 8000520:	f002 fc38 	bl	8002d94 <HAL_PCD_MspInit>
 8000524:	e7e1      	b.n	80004ea <HAL_PCD_Init+0x10>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000526:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800052a:	2101      	movs	r1, #1
 800052c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 8000530:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000534:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000536:	2100      	movs	r1, #0
 8000538:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 800053c:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800053e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000540:	1c9a      	adds	r2, r3, #2
 8000542:	0152      	lsls	r2, r2, #5
 8000544:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000546:	3301      	adds	r3, #1
 8000548:	2b0e      	cmp	r3, #14
 800054a:	d9ec      	bls.n	8000526 <HAL_PCD_Init+0x4c>
 800054c:	2300      	movs	r3, #0
 800054e:	e012      	b.n	8000576 <HAL_PCD_Init+0x9c>
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000550:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000554:	2100      	movs	r1, #0
 8000556:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 800055a:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800055e:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000560:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000564:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000568:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800056c:	f103 0212 	add.w	r2, r3, #18
 8000570:	0152      	lsls	r2, r2, #5
 8000572:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000574:	3301      	adds	r3, #1
 8000576:	2b0e      	cmp	r3, #14
 8000578:	d9ea      	bls.n	8000550 <HAL_PCD_Init+0x76>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800057a:	4625      	mov	r5, r4
 800057c:	f855 7b10 	ldr.w	r7, [r5], #16
 8000580:	466e      	mov	r6, sp
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000586:	682b      	ldr	r3, [r5, #0]
 8000588:	6033      	str	r3, [r6, #0]
 800058a:	1d23      	adds	r3, r4, #4
 800058c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800058e:	4638      	mov	r0, r7
 8000590:	f000 ffc0 	bl	8001514 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8000594:	2500      	movs	r5, #0
 8000596:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800059a:	2301      	movs	r3, #1
 800059c:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 80005a0:	6820      	ldr	r0, [r4, #0]
 80005a2:	f001 fad0 	bl	8001b46 <USB_DevDisconnect>
  return HAL_OK;
 80005a6:	4628      	mov	r0, r5
}
 80005a8:	b007      	add	sp, #28
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80005ac:	2001      	movs	r0, #1
 80005ae:	4770      	bx	lr

080005b0 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80005b0:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d101      	bne.n	80005bc <HAL_PCD_Start+0xc>
 80005b8:	2002      	movs	r0, #2
 80005ba:	4770      	bx	lr
{
 80005bc:	b510      	push	{r4, lr}
 80005be:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005c0:	2101      	movs	r1, #1
 80005c2:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80005c6:	f002 fd0e 	bl	8002fe6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80005ca:	6820      	ldr	r0, [r4, #0]
 80005cc:	f001 fab9 	bl	8001b42 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005d0:	6820      	ldr	r0, [r4, #0]
 80005d2:	f000 ff8a 	bl	80014ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005dc:	bd10      	pop	{r4, pc}

080005de <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005de:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d101      	bne.n	80005ea <HAL_PCD_SetAddress+0xc>
 80005e6:	2002      	movs	r0, #2
 80005e8:	4770      	bx	lr
{
 80005ea:	b510      	push	{r4, lr}
 80005ec:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005ee:	2301      	movs	r3, #1
 80005f0:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005f4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005f8:	6800      	ldr	r0, [r0, #0]
 80005fa:	f001 fa9c 	bl	8001b36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005fe:	2000      	movs	r0, #0
 8000600:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000604:	bd10      	pop	{r4, pc}

08000606 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000606:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000608:	b24d      	sxtb	r5, r1
 800060a:	2d00      	cmp	r5, #0
 800060c:	db12      	blt.n	8000634 <HAL_PCD_EP_Open+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800060e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000612:	0164      	lsls	r4, r4, #5
 8000614:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8000618:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 800061a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800061e:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000620:	0fed      	lsrs	r5, r5, #31
 8000622:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8000624:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8000626:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8000628:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 800062c:	2b01      	cmp	r3, #1
 800062e:	d107      	bne.n	8000640 <HAL_PCD_EP_Open+0x3a>
 8000630:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8000632:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000634:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000638:	0164      	lsls	r4, r4, #5
 800063a:	3428      	adds	r4, #40	; 0x28
 800063c:	4404      	add	r4, r0
 800063e:	e7ec      	b.n	800061a <HAL_PCD_EP_Open+0x14>
 8000640:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8000642:	2301      	movs	r3, #1
 8000644:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000648:	4621      	mov	r1, r4
 800064a:	6800      	ldr	r0, [r0, #0]
 800064c:	f000 ff78 	bl	8001540 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000650:	2000      	movs	r0, #0
 8000652:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
 8000656:	bd38      	pop	{r3, r4, r5, pc}

08000658 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000658:	b24a      	sxtb	r2, r1
 800065a:	2a00      	cmp	r2, #0
 800065c:	db10      	blt.n	8000680 <HAL_PCD_EP_Close+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800065e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000662:	015b      	lsls	r3, r3, #5
 8000664:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000668:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7FU;
 800066a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800066e:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000670:	0fd2      	lsrs	r2, r2, #31
 8000672:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000674:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000678:	2a01      	cmp	r2, #1
 800067a:	d107      	bne.n	800068c <HAL_PCD_EP_Close+0x34>
 800067c:	2002      	movs	r0, #2
 800067e:	4770      	bx	lr
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000680:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000684:	015b      	lsls	r3, r3, #5
 8000686:	3328      	adds	r3, #40	; 0x28
 8000688:	4403      	add	r3, r0
 800068a:	e7ee      	b.n	800066a <HAL_PCD_EP_Close+0x12>
{  
 800068c:	b510      	push	{r4, lr}
 800068e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000690:	2201      	movs	r2, #1
 8000692:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000696:	4619      	mov	r1, r3
 8000698:	6800      	ldr	r0, [r0, #0]
 800069a:	f001 f8ea 	bl	8001872 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800069e:	2000      	movs	r0, #0
 80006a0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80006a4:	bd10      	pop	{r4, pc}

080006a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
 80006a8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006ac:	016c      	lsls	r4, r5, #5
 80006ae:	f504 710a 	add.w	r1, r4, #552	; 0x228
 80006b2:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006b4:	4404      	add	r4, r0
 80006b6:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80006ba:	f105 0212 	add.w	r2, r5, #18
 80006be:	0152      	lsls	r2, r2, #5
 80006c0:	1886      	adds	r6, r0, r2
 80006c2:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 80006c8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 80006cc:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 80006d0:	b125      	cbz	r5, 80006dc <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	f001 fa54 	bl	8001b80 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006d8:	2000      	movs	r0, #0
 80006da:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	f001 fa4f 	bl	8001b80 <USB_EPStartXfer>
 80006e2:	e7f9      	b.n	80006d8 <HAL_PCD_EP_Receive+0x32>

080006e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006ea:	016c      	lsls	r4, r5, #5
 80006ec:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80006f0:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006f2:	4404      	add	r4, r0
 80006f4:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80006f6:	1caa      	adds	r2, r5, #2
 80006f8:	0152      	lsls	r2, r2, #5
 80006fa:	1886      	adds	r6, r0, r2
 80006fc:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80006fe:	2300      	movs	r3, #0
 8000700:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 8000702:	2301      	movs	r3, #1
 8000704:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8000708:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 800070c:	b125      	cbz	r5, 8000718 <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800070e:	6800      	ldr	r0, [r0, #0]
 8000710:	f001 fa36 	bl	8001b80 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000714:	2000      	movs	r0, #0
 8000716:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000718:	6800      	ldr	r0, [r0, #0]
 800071a:	f001 fa31 	bl	8001b80 <USB_EPStartXfer>
 800071e:	e7f9      	b.n	8000714 <HAL_PCD_EP_Transmit+0x30>

08000720 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	4605      	mov	r5, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000726:	2300      	movs	r3, #0
 8000728:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 800072c:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000730:	e195      	b.n	8000a5e <PCD_EP_ISR_Handler+0x33e>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000732:	8803      	ldrh	r3, [r0, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800073a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800073e:	b29b      	uxth	r3, r3
 8000740:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000742:	682a      	ldr	r2, [r5, #0]
 8000744:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000748:	b29b      	uxth	r3, r3
 800074a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800074e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000752:	3302      	adds	r3, #2
 8000754:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000758:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800075c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000760:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000762:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000764:	4413      	add	r3, r2
 8000766:	63eb      	str	r3, [r5, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000768:	2100      	movs	r1, #0
 800076a:	4628      	mov	r0, r5
 800076c:	f002 fb44 	bl	8002df8 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000770:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000774:	2b00      	cmp	r3, #0
 8000776:	f000 8172 	beq.w	8000a5e <PCD_EP_ISR_Handler+0x33e>
 800077a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800077c:	2b00      	cmp	r3, #0
 800077e:	f040 816e 	bne.w	8000a5e <PCD_EP_ISR_Handler+0x33e>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000782:	682a      	ldr	r2, [r5, #0]
 8000784:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8000796:	e162      	b.n	8000a5e <PCD_EP_ISR_Handler+0x33e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000798:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800079c:	b29b      	uxth	r3, r3
 800079e:	f895 2228 	ldrb.w	r2, [r5, #552]	; 0x228
 80007a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80007a6:	3306      	adds	r3, #6
 80007a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80007ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80007b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007b4:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80007b8:	f8b5 222c 	ldrh.w	r2, [r5, #556]	; 0x22c
 80007bc:	f205 412c 	addw	r1, r5, #1068	; 0x42c
 80007c0:	f001 fb44 	bl	8001e4c <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80007c4:	682a      	ldr	r2, [r5, #0]
 80007c6:	8813      	ldrh	r3, [r2, #0]
 80007c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007cc:	051b      	lsls	r3, r3, #20
 80007ce:	0d1b      	lsrs	r3, r3, #20
 80007d0:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80007d2:	4628      	mov	r0, r5
 80007d4:	f002 fafe 	bl	8002dd4 <HAL_PCD_SetupStageCallback>
 80007d8:	e141      	b.n	8000a5e <PCD_EP_ISR_Handler+0x33e>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80007da:	f8b5 222c 	ldrh.w	r2, [r5, #556]	; 0x22c
 80007de:	f8d5 123c 	ldr.w	r1, [r5, #572]	; 0x23c
 80007e2:	f001 fb33 	bl	8001e4c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80007e6:	f8d5 2244 	ldr.w	r2, [r5, #580]	; 0x244
 80007ea:	f8d5 323c 	ldr.w	r3, [r5, #572]	; 0x23c
 80007ee:	4413      	add	r3, r2
 80007f0:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
 80007f4:	e172      	b.n	8000adc <PCD_EP_ISR_Handler+0x3bc>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80007f6:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80007fa:	f011 0f01 	tst.w	r1, #1
 80007fe:	d001      	beq.n	8000804 <PCD_EP_ISR_Handler+0xe4>
 8000800:	3201      	adds	r2, #1
 8000802:	b292      	uxth	r2, r2
 8000804:	0292      	lsls	r2, r2, #10
 8000806:	b292      	uxth	r2, r2
 8000808:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800080c:	e184      	b.n	8000b18 <PCD_EP_ISR_Handler+0x3f8>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800080e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8000812:	b29b      	uxth	r3, r3
 8000814:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000818:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800081c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000820:	d136      	bne.n	8000890 <PCD_EP_ISR_Handler+0x170>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000822:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000826:	f013 0f80 	tst.w	r3, #128	; 0x80
 800082a:	f000 8118 	beq.w	8000a5e <PCD_EP_ISR_Handler+0x33e>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800082e:	682a      	ldr	r2, [r5, #0]
 8000830:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8000834:	b29b      	uxth	r3, r3
 8000836:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800083a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800083e:	b29b      	uxth	r3, r3
 8000840:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000844:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000848:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800084c:	2b00      	cmp	r3, #0
 800084e:	f040 80b6 	bne.w	80009be <PCD_EP_ISR_Handler+0x29e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000852:	6828      	ldr	r0, [r5, #0]
 8000854:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000858:	b29b      	uxth	r3, r3
 800085a:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 800085e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8000862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000866:	3302      	adds	r3, #2
 8000868:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800086c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000874:	1ca2      	adds	r2, r4, #2
 8000876:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 800087a:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 800087c:	2b00      	cmp	r3, #0
 800087e:	f000 80cd 	beq.w	8000a1c <PCD_EP_ISR_Handler+0x2fc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000882:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000886:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000888:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800088a:	f001 f964 	bl	8001b56 <USB_WritePMA>
 800088e:	e0c5      	b.n	8000a1c <PCD_EP_ISR_Handler+0x2fc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000890:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8000894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000898:	051b      	lsls	r3, r3, #20
 800089a:	0d1b      	lsrs	r3, r3, #20
 800089c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 80008a0:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80008a4:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 80008a8:	b9db      	cbnz	r3, 80008e2 <PCD_EP_ISR_Handler+0x1c2>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008aa:	6828      	ldr	r0, [r5, #0]
 80008ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 80008b6:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 80008ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008be:	3306      	adds	r3, #6
 80008c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008c4:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80008c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80008cc:	b38e      	cbz	r6, 8000932 <PCD_EP_ISR_Handler+0x212>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80008ce:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80008d2:	4633      	mov	r3, r6
 80008d4:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80008d8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80008dc:	f001 fab6 	bl	8001e4c <USB_ReadPMA>
 80008e0:	e027      	b.n	8000932 <PCD_EP_ISR_Handler+0x212>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80008e2:	6828      	ldr	r0, [r5, #0]
 80008e4:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80008e8:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 80008ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80008f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80008f4:	d043      	beq.n	800097e <PCD_EP_ISR_Handler+0x25e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80008f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000900:	3302      	adds	r3, #2
 8000902:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000906:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 800090a:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 800090e:	bb66      	cbnz	r6, 800096a <PCD_EP_ISR_Handler+0x24a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000910:	682a      	ldr	r2, [r5, #0]
 8000912:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000916:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 800091a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800091e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000922:	051b      	lsls	r3, r3, #20
 8000924:	0d1b      	lsrs	r3, r3, #20
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800092e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 8000932:	f104 0312 	add.w	r3, r4, #18
 8000936:	015b      	lsls	r3, r3, #5
 8000938:	18e9      	adds	r1, r5, r3
 800093a:	684a      	ldr	r2, [r1, #4]
 800093c:	4432      	add	r2, r6
 800093e:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 8000940:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000944:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8000948:	4432      	add	r2, r6
 800094a:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800094e:	58eb      	ldr	r3, [r5, r3]
 8000950:	b11b      	cbz	r3, 800095a <PCD_EP_ISR_Handler+0x23a>
 8000952:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 8000956:	428e      	cmp	r6, r1
 8000958:	d229      	bcs.n	80009ae <PCD_EP_ISR_Handler+0x28e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800095a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800095e:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000962:	4628      	mov	r0, r5
 8000964:	f002 fa3e 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
 8000968:	e75b      	b.n	8000822 <PCD_EP_ISR_Handler+0x102>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800096a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800096e:	4633      	mov	r3, r6
 8000970:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8000974:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000978:	f001 fa68 	bl	8001e4c <USB_ReadPMA>
 800097c:	e7c8      	b.n	8000910 <PCD_EP_ISR_Handler+0x1f0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800097e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000982:	b29b      	uxth	r3, r3
 8000984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000988:	3306      	adds	r3, #6
 800098a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800098e:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8000992:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000996:	2e00      	cmp	r6, #0
 8000998:	d0ba      	beq.n	8000910 <PCD_EP_ISR_Handler+0x1f0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800099a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800099e:	4633      	mov	r3, r6
 80009a0:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 80009a4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80009a8:	f001 fa50 	bl	8001e4c <USB_ReadPMA>
 80009ac:	e7b0      	b.n	8000910 <PCD_EP_ISR_Handler+0x1f0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80009ae:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80009b2:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 80009b6:	4628      	mov	r0, r5
 80009b8:	f7ff fe75 	bl	80006a6 <HAL_PCD_EP_Receive>
 80009bc:	e731      	b.n	8000822 <PCD_EP_ISR_Handler+0x102>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80009be:	6828      	ldr	r0, [r5, #0]
 80009c0:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80009c4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80009c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80009cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80009d0:	f000 80b8 	beq.w	8000b44 <PCD_EP_ISR_Handler+0x424>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80009d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009d8:	b29b      	uxth	r3, r3
 80009da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009de:	3302      	adds	r3, #2
 80009e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80009e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ec:	1ca2      	adds	r2, r4, #2
 80009ee:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 80009f2:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f040 809e 	bne.w	8000b36 <PCD_EP_ISR_Handler+0x416>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80009fa:	682a      	ldr	r2, [r5, #0]
 80009fc:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000a00:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000a04:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a0c:	051b      	lsls	r3, r3, #20
 8000a0e:	0d1b      	lsrs	r3, r3, #20
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a1c:	682a      	ldr	r2, [r5, #0]
 8000a1e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	eb05 1044 	add.w	r0, r5, r4, lsl #5
 8000a28:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000a2c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a30:	3302      	adds	r3, #2
 8000a32:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a36:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000a3a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a3e:	1ca3      	adds	r3, r4, #2
 8000a40:	015b      	lsls	r3, r3, #5
 8000a42:	18e9      	adds	r1, r5, r3
 8000a44:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 8000a46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000a48:	440a      	add	r2, r1
 8000a4a:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000a4c:	58eb      	ldr	r3, [r5, r3]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8092 	bne.w	8000b78 <PCD_EP_ISR_Handler+0x458>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a54:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f002 f9cd 	bl	8002df8 <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000a5e:	6828      	ldr	r0, [r5, #0]
 8000a60:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000a6a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000a6e:	f000 808b 	beq.w	8000b88 <PCD_EP_ISR_Handler+0x468>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000a72:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    if (epindex == 0)
 8000a76:	f014 040f 	ands.w	r4, r4, #15
 8000a7a:	f47f aec8 	bne.w	800080e <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a82:	f013 0f10 	tst.w	r3, #16
 8000a86:	f43f ae54 	beq.w	8000732 <PCD_EP_ISR_Handler+0x12>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000a8a:	8803      	ldrh	r3, [r0, #0]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f8ad 3004 	strh.w	r3, [sp, #4]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000a92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000a96:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000a9a:	f47f ae7d 	bne.w	8000798 <PCD_EP_ISR_Handler+0x78>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000aa2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000aa6:	d0da      	beq.n	8000a5e <PCD_EP_ISR_Handler+0x33e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000aa8:	8803      	ldrh	r3, [r0, #0]
 8000aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aae:	051b      	lsls	r3, r3, #20
 8000ab0:	0d1b      	lsrs	r3, r3, #20
 8000ab2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ab4:	6828      	ldr	r0, [r5, #0]
 8000ab6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f895 2228 	ldrb.w	r2, [r5, #552]	; 0x228
 8000ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ac4:	3306      	adds	r3, #6
 8000ac6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000aca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ad2:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f47f ae7f 	bne.w	80007da <PCD_EP_ISR_Handler+0xba>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f002 f980 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ae4:	682a      	ldr	r2, [r5, #0]
 8000ae6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3306      	adds	r3, #6
 8000aee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000af2:	f8d5 1238 	ldr.w	r1, [r5, #568]	; 0x238
 8000af6:	293e      	cmp	r1, #62	; 0x3e
 8000af8:	f67f ae7d 	bls.w	80007f6 <PCD_EP_ISR_Handler+0xd6>
 8000afc:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8000b00:	f011 0f1f 	tst.w	r1, #31
 8000b04:	d101      	bne.n	8000b0a <PCD_EP_ISR_Handler+0x3ea>
 8000b06:	3a01      	subs	r2, #1
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8000b0e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000b12:	b292      	uxth	r2, r2
 8000b14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000b18:	682a      	ldr	r2, [r5, #0]
 8000b1a:	8813      	ldrh	r3, [r2, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	8013      	strh	r3, [r2, #0]
 8000b34:	e793      	b.n	8000a5e <PCD_EP_ISR_Handler+0x33e>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b36:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000b3a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8000b3c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b3e:	f001 f80a 	bl	8001b56 <USB_WritePMA>
 8000b42:	e75a      	b.n	80009fa <PCD_EP_ISR_Handler+0x2da>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b4e:	3306      	adds	r3, #6
 8000b50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b5c:	1ca2      	adds	r2, r4, #2
 8000b5e:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 8000b62:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f43f af48 	beq.w	80009fa <PCD_EP_ISR_Handler+0x2da>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b6a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000b6e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000b70:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b72:	f000 fff0 	bl	8001b56 <USB_WritePMA>
 8000b76:	e740      	b.n	80009fa <PCD_EP_ISR_Handler+0x2da>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b78:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8000b7c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000b80:	4628      	mov	r0, r5
 8000b82:	f7ff fdaf 	bl	80006e4 <HAL_PCD_EP_Transmit>
 8000b86:	e76a      	b.n	8000a5e <PCD_EP_ISR_Handler+0x33e>
        }
      } 
    }
  }
  return HAL_OK;
}
 8000b88:	2000      	movs	r0, #0
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}

08000b8e <HAL_PCD_IRQHandler>:
{ 
 8000b8e:	b510      	push	{r4, lr}
 8000b90:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000b92:	6800      	ldr	r0, [r0, #0]
 8000b94:	f000 ffd9 	bl	8001b4a <USB_ReadInterrupts>
 8000b98:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000b9c:	d145      	bne.n	8000c2a <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000b9e:	6820      	ldr	r0, [r4, #0]
 8000ba0:	f000 ffd3 	bl	8001b4a <USB_ReadInterrupts>
 8000ba4:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8000ba8:	d143      	bne.n	8000c32 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000baa:	6820      	ldr	r0, [r4, #0]
 8000bac:	f000 ffcd 	bl	8001b4a <USB_ReadInterrupts>
 8000bb0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000bb4:	d008      	beq.n	8000bc8 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000bb6:	6822      	ldr	r2, [r4, #0]
 8000bb8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	f000 ffbe 	bl	8001b4a <USB_ReadInterrupts>
 8000bce:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8000bd2:	d008      	beq.n	8000be6 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000bd4:	6822      	ldr	r2, [r4, #0]
 8000bd6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000be6:	6820      	ldr	r0, [r4, #0]
 8000be8:	f000 ffaf 	bl	8001b4a <USB_ReadInterrupts>
 8000bec:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000bf0:	d130      	bne.n	8000c54 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000bf2:	6820      	ldr	r0, [r4, #0]
 8000bf4:	f000 ffa9 	bl	8001b4a <USB_ReadInterrupts>
 8000bf8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8000bfc:	d149      	bne.n	8000c92 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bfe:	6820      	ldr	r0, [r4, #0]
 8000c00:	f000 ffa3 	bl	8001b4a <USB_ReadInterrupts>
 8000c04:	f410 7f00 	tst.w	r0, #512	; 0x200
 8000c08:	d166      	bne.n	8000cd8 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c0a:	6820      	ldr	r0, [r4, #0]
 8000c0c:	f000 ff9d 	bl	8001b4a <USB_ReadInterrupts>
 8000c10:	f410 7f80 	tst.w	r0, #256	; 0x100
 8000c14:	d008      	beq.n	8000c28 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000c28:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fd78 	bl	8000720 <PCD_EP_ISR_Handler>
 8000c30:	e7b5      	b.n	8000b9e <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000c44:	4620      	mov	r0, r4
 8000c46:	f002 f8e6 	bl	8002e16 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fcc6 	bl	80005de <HAL_PCD_SetAddress>
 8000c52:	e7aa      	b.n	8000baa <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	f023 0304 	bic.w	r3, r3, #4
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	f023 0308 	bic.w	r3, r3, #8
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f002 f8e9 	bl	8002e50 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000c90:	e7af      	b.n	8000bf2 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000c92:	6822      	ldr	r2, [r4, #0]
 8000c94:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000ca2:	6822      	ldr	r2, [r4, #0]
 8000ca4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000cb4:	6822      	ldr	r2, [r4, #0]
 8000cb6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000cc4:	6820      	ldr	r0, [r4, #0]
 8000cc6:	f000 ff40 	bl	8001b4a <USB_ReadInterrupts>
 8000cca:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000cce:	d196      	bne.n	8000bfe <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f002 f8ad 	bl	8002e30 <HAL_PCD_SuspendCallback>
 8000cd6:	e792      	b.n	8000bfe <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000cea:	4620      	mov	r0, r4
 8000cec:	f002 f88d 	bl	8002e0a <HAL_PCD_SOFCallback>
 8000cf0:	e78b      	b.n	8000c0a <HAL_PCD_IRQHandler+0x7c>

08000cf2 <HAL_PCD_EP_SetStall>:
{
 8000cf2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000cf4:	b24a      	sxtb	r2, r1
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	db10      	blt.n	8000d1c <HAL_PCD_EP_SetStall+0x2a>
    ep = &hpcd->OUT_ep[ep_addr];
 8000cfa:	014b      	lsls	r3, r1, #5
 8000cfc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d00:	4403      	add	r3, r0
  ep->is_stall = 1U;
 8000d02:	2401      	movs	r4, #1
 8000d04:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000d06:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000d0a:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000d0c:	0fd2      	lsrs	r2, r2, #31
 8000d0e:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8000d10:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000d14:	2a01      	cmp	r2, #1
 8000d16:	d107      	bne.n	8000d28 <HAL_PCD_EP_SetStall+0x36>
 8000d18:	2002      	movs	r0, #2
}
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d1c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000d20:	015b      	lsls	r3, r3, #5
 8000d22:	3328      	adds	r3, #40	; 0x28
 8000d24:	4403      	add	r3, r0
 8000d26:	e7ec      	b.n	8000d02 <HAL_PCD_EP_SetStall+0x10>
 8000d28:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000d30:	4619      	mov	r1, r3
 8000d32:	6800      	ldr	r0, [r0, #0]
 8000d34:	f000 fe7f 	bl	8001a36 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000d38:	b11c      	cbz	r4, 8000d42 <HAL_PCD_EP_SetStall+0x50>
  __HAL_UNLOCK(hpcd); 
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return HAL_OK;
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000d42:	f205 412c 	addw	r1, r5, #1068	; 0x42c
 8000d46:	6828      	ldr	r0, [r5, #0]
 8000d48:	f000 ff03 	bl	8001b52 <USB_EP0_OutStart>
 8000d4c:	e7f5      	b.n	8000d3a <HAL_PCD_EP_SetStall+0x48>

08000d4e <HAL_PCD_EP_ClrStall>:
{
 8000d4e:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000d50:	b24a      	sxtb	r2, r1
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	db10      	blt.n	8000d78 <HAL_PCD_EP_ClrStall+0x2a>
    ep = &hpcd->OUT_ep[ep_addr];
 8000d56:	014b      	lsls	r3, r1, #5
 8000d58:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d5c:	4403      	add	r3, r0
  ep->is_stall = 0U;
 8000d5e:	2400      	movs	r4, #0
 8000d60:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000d62:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d66:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000d68:	0fd2      	lsrs	r2, r2, #31
 8000d6a:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8000d6c:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d107      	bne.n	8000d84 <HAL_PCD_EP_ClrStall+0x36>
 8000d74:	2002      	movs	r0, #2
}
 8000d76:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d78:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000d7c:	015b      	lsls	r3, r3, #5
 8000d7e:	3328      	adds	r3, #40	; 0x28
 8000d80:	4403      	add	r3, r0
 8000d82:	e7ec      	b.n	8000d5e <HAL_PCD_EP_ClrStall+0x10>
 8000d84:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000d86:	2201      	movs	r2, #1
 8000d88:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6800      	ldr	r0, [r0, #0]
 8000d90:	f000 fe88 	bl	8001aa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000d94:	2000      	movs	r0, #0
 8000d96:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d9a:	bd10      	pop	{r4, pc}

08000d9c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000d9c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000da0:	d00c      	beq.n	8000dbc <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000da2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000da6:	0149      	lsls	r1, r1, #5
 8000da8:	3128      	adds	r1, #40	; 0x28
 8000daa:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000dac:	b15a      	cbz	r2, 8000dc6 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8000dae:	2201      	movs	r2, #1
 8000db0:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000db2:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000db4:	0c1b      	lsrs	r3, r3, #16
 8000db6:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8000db8:	2000      	movs	r0, #0
 8000dba:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8000dbc:	0149      	lsls	r1, r1, #5
 8000dbe:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8000dc2:	4401      	add	r1, r0
 8000dc4:	e7f2      	b.n	8000dac <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8000dc6:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8000dc8:	808b      	strh	r3, [r1, #4]
 8000dca:	e7f5      	b.n	8000db8 <HAL_PCDEx_PMAConfig+0x1c>

08000dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000dcc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <RCC_Delay+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <RCC_Delay+0x28>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	0a5b      	lsrs	r3, r3, #9
 8000dda:	fb00 f003 	mul.w	r0, r0, r3
 8000dde:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000de0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000de2:	9b01      	ldr	r3, [sp, #4]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	9201      	str	r2, [sp, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f9      	bne.n	8000de0 <RCC_Delay+0x14>
}
 8000dec:	b002      	add	sp, #8
 8000dee:	4770      	bx	lr
 8000df0:	200000c4 	.word	0x200000c4
 8000df4:	10624dd3 	.word	0x10624dd3

08000df8 <HAL_RCC_OscConfig>:
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfe:	6803      	ldr	r3, [r0, #0]
 8000e00:	f013 0f01 	tst.w	r3, #1
 8000e04:	d03d      	beq.n	8000e82 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e06:	4bac      	ldr	r3, [pc, #688]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d02e      	beq.n	8000e70 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e12:	4ba9      	ldr	r3, [pc, #676]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d023      	beq.n	8000e66 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1e:	6863      	ldr	r3, [r4, #4]
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e24:	d051      	beq.n	8000eca <HAL_RCC_OscConfig+0xd2>
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d155      	bne.n	8000ed6 <HAL_RCC_OscConfig+0xde>
 8000e2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e40:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e42:	6863      	ldr	r3, [r4, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d060      	beq.n	8000f0a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000e48:	f7ff f9b0 	bl	80001ac <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	4b9a      	ldr	r3, [pc, #616]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e56:	d114      	bne.n	8000e82 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff f9a8 	bl	80001ac <HAL_GetTick>
 8000e5c:	1b40      	subs	r0, r0, r5
 8000e5e:	2864      	cmp	r0, #100	; 0x64
 8000e60:	d9f5      	bls.n	8000e4e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000e62:	2003      	movs	r0, #3
 8000e64:	e1af      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e66:	4b94      	ldr	r3, [pc, #592]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e6e:	d0d6      	beq.n	8000e1e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	4b91      	ldr	r3, [pc, #580]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e78:	d003      	beq.n	8000e82 <HAL_RCC_OscConfig+0x8a>
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 819f 	beq.w	80011c0 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	f013 0f02 	tst.w	r3, #2
 8000e88:	d065      	beq.n	8000f56 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e8a:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f013 0f0c 	tst.w	r3, #12
 8000e92:	d04e      	beq.n	8000f32 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e94:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d043      	beq.n	8000f28 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea0:	6923      	ldr	r3, [r4, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d079      	beq.n	8000f9a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4b84      	ldr	r3, [pc, #528]	; (80010bc <HAL_RCC_OscConfig+0x2c4>)
 8000eaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eac:	f7ff f97e 	bl	80001ac <HAL_GetTick>
 8000eb0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb2:	4b81      	ldr	r3, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f013 0f02 	tst.w	r3, #2
 8000eba:	d165      	bne.n	8000f88 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ebc:	f7ff f976 	bl	80001ac <HAL_GetTick>
 8000ec0:	1b40      	subs	r0, r0, r5
 8000ec2:	2802      	cmp	r0, #2
 8000ec4:	d9f5      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	e17d      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eca:	4a7b      	ldr	r2, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000ecc:	6813      	ldr	r3, [r2, #0]
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e7b5      	b.n	8000e42 <HAL_RCC_OscConfig+0x4a>
 8000ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eda:	d009      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xf8>
 8000edc:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e7a8      	b.n	8000e42 <HAL_RCC_OscConfig+0x4a>
 8000ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e79b      	b.n	8000e42 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8000f0a:	f7ff f94f 	bl	80001ac <HAL_GetTick>
 8000f0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f10:	4b69      	ldr	r3, [pc, #420]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f18:	d0b3      	beq.n	8000e82 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1a:	f7ff f947 	bl	80001ac <HAL_GetTick>
 8000f1e:	1b40      	subs	r0, r0, r5
 8000f20:	2864      	cmp	r0, #100	; 0x64
 8000f22:	d9f5      	bls.n	8000f10 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000f24:	2003      	movs	r0, #3
 8000f26:	e14e      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f28:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f30:	d1b6      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f013 0f02 	tst.w	r3, #2
 8000f3a:	d004      	beq.n	8000f46 <HAL_RCC_OscConfig+0x14e>
 8000f3c:	6923      	ldr	r3, [r4, #16]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d001      	beq.n	8000f46 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000f42:	2001      	movs	r0, #1
 8000f44:	e13f      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	4a5c      	ldr	r2, [pc, #368]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000f48:	6813      	ldr	r3, [r2, #0]
 8000f4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f4e:	6961      	ldr	r1, [r4, #20]
 8000f50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f54:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f013 0f08 	tst.w	r3, #8
 8000f5c:	d032      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	69a3      	ldr	r3, [r4, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d06e      	beq.n	8001042 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000f64:	2201      	movs	r2, #1
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <HAL_RCC_OscConfig+0x2c8>)
 8000f68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f6a:	f7ff f91f 	bl	80001ac <HAL_GetTick>
 8000f6e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	f013 0f02 	tst.w	r3, #2
 8000f78:	d121      	bne.n	8000fbe <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7a:	f7ff f917 	bl	80001ac <HAL_GetTick>
 8000f7e:	1b40      	subs	r0, r0, r5
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d9f5      	bls.n	8000f70 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000f84:	2003      	movs	r0, #3
 8000f86:	e11e      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f90:	6961      	ldr	r1, [r4, #20]
 8000f92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e7dd      	b.n	8000f56 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_RCC_OscConfig+0x2c4>)
 8000f9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff f904 	bl	80001ac <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f013 0f02 	tst.w	r3, #2
 8000fae:	d0d2      	beq.n	8000f56 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff f8fc 	bl	80001ac <HAL_GetTick>
 8000fb4:	1b40      	subs	r0, r0, r5
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9f5      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
 8000fbc:	e103      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff ff04 	bl	8000dcc <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	f013 0f04 	tst.w	r3, #4
 8000fca:	f000 8099 	beq.w	8001100 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fd6:	d146      	bne.n	8001066 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fe0:	61da      	str	r2, [r3, #28]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fec:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_RCC_OscConfig+0x2cc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ff6:	d038      	beq.n	800106a <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	68e3      	ldr	r3, [r4, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d049      	beq.n	8001092 <HAL_RCC_OscConfig+0x29a>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d14d      	bne.n	800109e <HAL_RCC_OscConfig+0x2a6>
 8001002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001006:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	621a      	str	r2, [r3, #32]
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	f022 0204 	bic.w	r2, r2, #4
 8001018:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800101a:	68e3      	ldr	r3, [r4, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d05d      	beq.n	80010dc <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001020:	f7ff f8c4 	bl	80001ac <HAL_GetTick>
 8001024:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	f013 0f02 	tst.w	r3, #2
 800102e:	d166      	bne.n	80010fe <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f7ff f8bc 	bl	80001ac <HAL_GetTick>
 8001034:	1b80      	subs	r0, r0, r6
 8001036:	f241 3388 	movw	r3, #5000	; 0x1388
 800103a:	4298      	cmp	r0, r3
 800103c:	d9f3      	bls.n	8001026 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 800103e:	2003      	movs	r0, #3
 8001040:	e0c1      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8001042:	2200      	movs	r2, #0
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_RCC_OscConfig+0x2c8>)
 8001046:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001048:	f7ff f8b0 	bl	80001ac <HAL_GetTick>
 800104c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	f013 0f02 	tst.w	r3, #2
 8001056:	d0b5      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff f8a8 	bl	80001ac <HAL_GetTick>
 800105c:	1b40      	subs	r0, r0, r5
 800105e:	2802      	cmp	r0, #2
 8001060:	d9f5      	bls.n	800104e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001062:	2003      	movs	r0, #3
 8001064:	e0af      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8001066:	2500      	movs	r5, #0
 8001068:	e7c1      	b.n	8000fee <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_RCC_OscConfig+0x2cc>)
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001074:	f7ff f89a 	bl	80001ac <HAL_GetTick>
 8001078:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_RCC_OscConfig+0x2cc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001082:	d1b9      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001084:	f7ff f892 	bl	80001ac <HAL_GetTick>
 8001088:	1b80      	subs	r0, r0, r6
 800108a:	2864      	cmp	r0, #100	; 0x64
 800108c:	d9f5      	bls.n	800107a <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e099      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 8001094:	6a13      	ldr	r3, [r2, #32]
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	e7bd      	b.n	800101a <HAL_RCC_OscConfig+0x222>
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d012      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2d0>
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_RCC_OscConfig+0x2c0>)
 80010a4:	6a1a      	ldr	r2, [r3, #32]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	f022 0204 	bic.w	r2, r2, #4
 80010b2:	621a      	str	r2, [r3, #32]
 80010b4:	e7b1      	b.n	800101a <HAL_RCC_OscConfig+0x222>
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	42420000 	.word	0x42420000
 80010c0:	42420480 	.word	0x42420480
 80010c4:	40007000 	.word	0x40007000
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	621a      	str	r2, [r3, #32]
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	621a      	str	r2, [r3, #32]
 80010da:	e79e      	b.n	800101a <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 80010dc:	f7ff f866 	bl	80001ac <HAL_GetTick>
 80010e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	f013 0f02 	tst.w	r3, #2
 80010ea:	d008      	beq.n	80010fe <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f7ff f85e 	bl	80001ac <HAL_GetTick>
 80010f0:	1b80      	subs	r0, r0, r6
 80010f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d9f3      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80010fa:	2003      	movs	r0, #3
 80010fc:	e063      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 80010fe:	b9e5      	cbnz	r5, 800113a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001100:	69e3      	ldr	r3, [r4, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d05e      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001106:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 8001108:	6852      	ldr	r2, [r2, #4]
 800110a:	f002 020c 	and.w	r2, r2, #12
 800110e:	2a08      	cmp	r2, #8
 8001110:	d05b      	beq.n	80011ca <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001112:	2b02      	cmp	r3, #2
 8001114:	d017      	beq.n	8001146 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001116:	2200      	movs	r2, #0
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_RCC_OscConfig+0x3dc>)
 800111a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800111c:	f7ff f846 	bl	80001ac <HAL_GetTick>
 8001120:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800112a:	d047      	beq.n	80011bc <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff f83e 	bl	80001ac <HAL_GetTick>
 8001130:	1b00      	subs	r0, r0, r4
 8001132:	2802      	cmp	r0, #2
 8001134:	d9f5      	bls.n	8001122 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001136:	2003      	movs	r0, #3
 8001138:	e045      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113a:	4a25      	ldr	r2, [pc, #148]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 800113c:	69d3      	ldr	r3, [r2, #28]
 800113e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001142:	61d3      	str	r3, [r2, #28]
 8001144:	e7dc      	b.n	8001100 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001146:	2200      	movs	r2, #0
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_RCC_OscConfig+0x3dc>)
 800114a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800114c:	f7ff f82e 	bl	80001ac <HAL_GetTick>
 8001150:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800115a:	d006      	beq.n	800116a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff f826 	bl	80001ac <HAL_GetTick>
 8001160:	1b40      	subs	r0, r0, r5
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f5      	bls.n	8001152 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
 8001168:	e02d      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800116a:	6a23      	ldr	r3, [r4, #32]
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d01a      	beq.n	80011a8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001172:	4917      	ldr	r1, [pc, #92]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 8001174:	684b      	ldr	r3, [r1, #4]
 8001176:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800117a:	6a22      	ldr	r2, [r4, #32]
 800117c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800117e:	4302      	orrs	r2, r0
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001184:	2201      	movs	r2, #1
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_RCC_OscConfig+0x3dc>)
 8001188:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800118a:	f7ff f80f 	bl	80001ac <HAL_GetTick>
 800118e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001198:	d10e      	bne.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff f807 	bl	80001ac <HAL_GetTick>
 800119e:	1b00      	subs	r0, r0, r4
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9f5      	bls.n	8001190 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80011a4:	2003      	movs	r0, #3
 80011a6:	e00e      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011a8:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_RCC_OscConfig+0x3d8>)
 80011aa:	6853      	ldr	r3, [r2, #4]
 80011ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011b0:	68a1      	ldr	r1, [r4, #8]
 80011b2:	430b      	orrs	r3, r1
 80011b4:	6053      	str	r3, [r2, #4]
 80011b6:	e7dc      	b.n	8001172 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80011b8:	2000      	movs	r0, #0
 80011ba:	e004      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
 80011bc:	2000      	movs	r0, #0
 80011be:	e002      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 80011c4:	2000      	movs	r0, #0
}
 80011c6:	b002      	add	sp, #8
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	e7fb      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ce>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	42420060 	.word	0x42420060

080011d8 <HAL_RCC_GetSysClockFreq>:
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011dc:	4c15      	ldr	r4, [pc, #84]	; (8001234 <HAL_RCC_GetSysClockFreq+0x5c>)
 80011de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e2:	f10d 0e18 	add.w	lr, sp, #24
 80011e6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ea:	8a23      	ldrh	r3, [r4, #16]
 80011ec:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_RCC_GetSysClockFreq+0x60>)
 80011f2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011f4:	f003 020c 	and.w	r2, r3, #12
 80011f8:	2a08      	cmp	r2, #8
 80011fa:	d118      	bne.n	800122e <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001200:	4472      	add	r2, lr
 8001202:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001206:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800120a:	d103      	bne.n	8001214 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_RCC_GetSysClockFreq+0x64>)
 800120e:	fb03 f000 	mul.w	r0, r3, r0
 8001212:	e00d      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_RCC_GetSysClockFreq+0x60>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800121c:	4473      	add	r3, lr
 800121e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_RCC_GetSysClockFreq+0x68>)
 8001224:	fbb3 f3f2 	udiv	r3, r3, r2
 8001228:	fb03 f000 	mul.w	r0, r3, r0
 800122c:	e000      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001230:	b006      	add	sp, #24
 8001232:	bd10      	pop	{r4, pc}
 8001234:	08003158 	.word	0x08003158
 8001238:	40021000 	.word	0x40021000
 800123c:	003d0900 	.word	0x003d0900
 8001240:	007a1200 	.word	0x007a1200

08001244 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <HAL_RCC_ClockConfig+0x168>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	428b      	cmp	r3, r1
 800124e:	d20c      	bcs.n	800126a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001250:	4a56      	ldr	r2, [pc, #344]	; (80013ac <HAL_RCC_ClockConfig+0x168>)
 8001252:	6813      	ldr	r3, [r2, #0]
 8001254:	f023 0307 	bic.w	r3, r3, #7
 8001258:	430b      	orrs	r3, r1
 800125a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	4299      	cmp	r1, r3
 8001264:	d001      	beq.n	800126a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	4770      	bx	lr
{
 800126a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	6803      	ldr	r3, [r0, #0]
 800126e:	f013 0f02 	tst.w	r3, #2
 8001272:	d006      	beq.n	8001282 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001274:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 8001276:	6853      	ldr	r3, [r2, #4]
 8001278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127c:	6884      	ldr	r4, [r0, #8]
 800127e:	4323      	orrs	r3, r4
 8001280:	6053      	str	r3, [r2, #4]
 8001282:	460d      	mov	r5, r1
 8001284:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	6803      	ldr	r3, [r0, #0]
 8001288:	f013 0f01 	tst.w	r3, #1
 800128c:	d052      	beq.n	8001334 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128e:	6843      	ldr	r3, [r0, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d023      	beq.n	80012dc <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001294:	2b02      	cmp	r3, #2
 8001296:	d028      	beq.n	80012ea <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	f012 0f02 	tst.w	r2, #2
 80012a0:	f000 8082 	beq.w	80013a8 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a4:	4942      	ldr	r1, [pc, #264]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 80012a6:	684a      	ldr	r2, [r1, #4]
 80012a8:	f022 0203 	bic.w	r2, r2, #3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80012b0:	f7fe ff7c 	bl	80001ac <HAL_GetTick>
 80012b4:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	6863      	ldr	r3, [r4, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d01d      	beq.n	80012f8 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d02a      	beq.n	8001316 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c0:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f013 0f0c 	tst.w	r3, #12
 80012c8:	d034      	beq.n	8001334 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ca:	f7fe ff6f 	bl	80001ac <HAL_GetTick>
 80012ce:	1b80      	subs	r0, r0, r6
 80012d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d4:	4298      	cmp	r0, r3
 80012d6:	d9f3      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 80012d8:	2003      	movs	r0, #3
 80012da:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012dc:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012e4:	d1de      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012f2:	d1d7      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d017      	beq.n	8001334 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7fe ff52 	bl	80001ac <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	f241 3388 	movw	r3, #5000	; 0x1388
 800130e:	4298      	cmp	r0, r3
 8001310:	d9f2      	bls.n	80012f8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d008      	beq.n	8001334 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001322:	f7fe ff43 	bl	80001ac <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	f241 3388 	movw	r3, #5000	; 0x1388
 800132c:	4298      	cmp	r0, r3
 800132e:	d9f2      	bls.n	8001316 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8001330:	2003      	movs	r0, #3
 8001332:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_RCC_ClockConfig+0x168>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	429d      	cmp	r5, r3
 800133e:	d20c      	bcs.n	800135a <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_RCC_ClockConfig+0x168>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f023 0307 	bic.w	r3, r3, #7
 8001348:	432b      	orrs	r3, r5
 800134a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	429d      	cmp	r5, r3
 8001354:	d001      	beq.n	800135a <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
}
 8001358:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f013 0f04 	tst.w	r3, #4
 8001360:	d006      	beq.n	8001370 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 8001364:	6853      	ldr	r3, [r2, #4]
 8001366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800136a:	68e1      	ldr	r1, [r4, #12]
 800136c:	430b      	orrs	r3, r1
 800136e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f013 0f08 	tst.w	r3, #8
 8001376:	d007      	beq.n	8001388 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 800137a:	6853      	ldr	r3, [r2, #4]
 800137c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001380:	6921      	ldr	r1, [r4, #16]
 8001382:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001386:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001388:	f7ff ff26 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_RCC_ClockConfig+0x16c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_RCC_ClockConfig+0x170>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	40d8      	lsrs	r0, r3
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_RCC_ClockConfig+0x174>)
 800139c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7fe fed4 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80013a4:	2000      	movs	r0, #0
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	0800317c 	.word	0x0800317c
 80013b8:	200000c4 	.word	0x200000c4

080013bc <HAL_RCC_GetHCLKFreq>:
}
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200000c4 	.word	0x200000c4

080013c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013ce:	6803      	ldr	r3, [r0, #0]
 80013d0:	f013 0f01 	tst.w	r3, #1
 80013d4:	d034      	beq.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013de:	d148      	bne.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013e2:	69da      	ldr	r2, [r3, #28]
 80013e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013e8:	61da      	str	r2, [r3, #28]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013f4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013fe:	d03a      	beq.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001404:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001408:	d011      	beq.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x66>
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001410:	4293      	cmp	r3, r2
 8001412:	d00c      	beq.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001416:	6a13      	ldr	r3, [r2, #32]
 8001418:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800141c:	492e      	ldr	r1, [pc, #184]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800141e:	2601      	movs	r6, #1
 8001420:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001422:	2600      	movs	r6, #0
 8001424:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001426:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001428:	f013 0f01 	tst.w	r3, #1
 800142c:	d137      	bne.n	800149e <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001430:	6a13      	ldr	r3, [r2, #32]
 8001432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001436:	6861      	ldr	r1, [r4, #4]
 8001438:	430b      	orrs	r3, r1
 800143a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800143c:	2d00      	cmp	r5, #0
 800143e:	d13f      	bne.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	f013 0f02 	tst.w	r3, #2
 8001446:	d006      	beq.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800144a:	6853      	ldr	r3, [r2, #4]
 800144c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001450:	68a1      	ldr	r1, [r4, #8]
 8001452:	430b      	orrs	r3, r1
 8001454:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	f013 0f10 	tst.w	r3, #16
 800145c:	d035      	beq.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001460:	6853      	ldr	r3, [r2, #4]
 8001462:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001466:	68e1      	ldr	r1, [r4, #12]
 8001468:	430b      	orrs	r3, r1
 800146a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800146c:	2000      	movs	r0, #0
}
 800146e:	b002      	add	sp, #8
 8001470:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2500      	movs	r5, #0
 8001474:	e7bf      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001480:	f7fe fe94 	bl	80001ac <HAL_GetTick>
 8001484:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800148e:	d1b7      	bne.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001490:	f7fe fe8c 	bl	80001ac <HAL_GetTick>
 8001494:	1b80      	subs	r0, r0, r6
 8001496:	2864      	cmp	r0, #100	; 0x64
 8001498:	d9f5      	bls.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800149a:	2003      	movs	r0, #3
 800149c:	e7e7      	b.n	800146e <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 800149e:	f7fe fe85 	bl	80001ac <HAL_GetTick>
 80014a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f013 0f02 	tst.w	r3, #2
 80014ac:	d1bf      	bne.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7fe fe7d 	bl	80001ac <HAL_GetTick>
 80014b2:	1b80      	subs	r0, r0, r6
 80014b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014b8:	4298      	cmp	r0, r3
 80014ba:	d9f3      	bls.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 80014bc:	2003      	movs	r0, #3
 80014be:	e7d6      	b.n	800146e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c0:	69d3      	ldr	r3, [r2, #28]
 80014c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c6:	61d3      	str	r3, [r2, #28]
 80014c8:	e7ba      	b.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80014ca:	2000      	movs	r0, #0
 80014cc:	e7cf      	b.n	800146e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40007000 	.word	0x40007000
 80014d8:	42420440 	.word	0x42420440

080014dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80014dc:	b084      	sub	sp, #16
 80014de:	a801      	add	r0, sp, #4
 80014e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80014e4:	2000      	movs	r0, #0
 80014e6:	b004      	add	sp, #16
 80014e8:	4770      	bx	lr

080014ea <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80014ea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80014f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014f8:	2000      	movs	r0, #0
 80014fa:	4770      	bx	lr

080014fc <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80014fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001500:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001504:	045b      	lsls	r3, r3, #17
 8001506:	0c5b      	lsrs	r3, r3, #17
 8001508:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800150c:	2000      	movs	r0, #0
 800150e:	4770      	bx	lr

08001510 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001510:	2000      	movs	r0, #0
 8001512:	4770      	bx	lr

08001514 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001514:	b084      	sub	sp, #16
 8001516:	b538      	push	{r3, r4, r5, lr}
 8001518:	ac05      	add	r4, sp, #20
 800151a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800151e:	2301      	movs	r3, #1
 8001520:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001524:	2400      	movs	r4, #0
 8001526:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800152a:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800152e:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8001532:	f7ff ffda 	bl	80014ea <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 8001536:	4620      	mov	r0, r4
 8001538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800153c:	b004      	add	sp, #16
 800153e:	4770      	bx	lr

08001540 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001540:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 8001542:	78cb      	ldrb	r3, [r1, #3]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d80f      	bhi.n	8001568 <USB_ActivateEndpoint+0x28>
 8001548:	e8df f003 	tbb	[pc, r3]
 800154c:	61556e02 	.word	0x61556e02
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001550:	780a      	ldrb	r2, [r1, #0]
 8001552:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800155c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001568:	780a      	ldrb	r2, [r1, #0]
 800156a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800156e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001572:	051b      	lsls	r3, r3, #20
 8001574:	0d1b      	lsrs	r3, r3, #20
 8001576:	4313      	orrs	r3, r2
 8001578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001584:	7a8b      	ldrb	r3, [r1, #10]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 80b2 	bne.w	80016f0 <USB_ActivateEndpoint+0x1b0>
  {
    if (ep->is_in)
 800158c:	784b      	ldrb	r3, [r1, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d057      	beq.n	8001642 <USB_ActivateEndpoint+0x102>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001592:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001596:	b29b      	uxth	r3, r3
 8001598:	780a      	ldrb	r2, [r1, #0]
 800159a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800159e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015a2:	888a      	ldrh	r2, [r1, #4]
 80015a4:	0852      	lsrs	r2, r2, #1
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80015ac:	780a      	ldrb	r2, [r1, #0]
 80015ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80015b6:	d00b      	beq.n	80015d0 <USB_ActivateEndpoint+0x90>
 80015b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015c0:	051b      	lsls	r3, r3, #20
 80015c2:	0d1b      	lsrs	r3, r3, #20
 80015c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80015d0:	780a      	ldrb	r2, [r1, #0]
 80015d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015e0:	f083 0320 	eor.w	r3, r3, #32
 80015e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80015f0:	2000      	movs	r0, #0
 80015f2:	bc10      	pop	{r4}
 80015f4:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80015f6:	780a      	ldrb	r2, [r1, #0]
 80015f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001606:	b29b      	uxth	r3, r3
 8001608:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 800160c:	e7ac      	b.n	8001568 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800160e:	780a      	ldrb	r2, [r1, #0]
 8001610:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001614:	b29b      	uxth	r3, r3
 8001616:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800161a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001622:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8001626:	e79f      	b.n	8001568 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001628:	780a      	ldrb	r2, [r1, #0]
 800162a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8001640:	e792      	b.n	8001568 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001642:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001646:	b29b      	uxth	r3, r3
 8001648:	780a      	ldrb	r2, [r1, #0]
 800164a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800164e:	3304      	adds	r3, #4
 8001650:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001654:	888a      	ldrh	r2, [r1, #4]
 8001656:	0852      	lsrs	r2, r2, #1
 8001658:	0052      	lsls	r2, r2, #1
 800165a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800165e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001662:	b29b      	uxth	r3, r3
 8001664:	780a      	ldrb	r2, [r1, #0]
 8001666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800166a:	3306      	adds	r3, #6
 800166c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001670:	690c      	ldr	r4, [r1, #16]
 8001672:	2c3e      	cmp	r4, #62	; 0x3e
 8001674:	d930      	bls.n	80016d8 <USB_ActivateEndpoint+0x198>
 8001676:	f3c4 124f 	ubfx	r2, r4, #5, #16
 800167a:	f014 0f1f 	tst.w	r4, #31
 800167e:	d101      	bne.n	8001684 <USB_ActivateEndpoint+0x144>
 8001680:	3a01      	subs	r2, #1
 8001682:	b292      	uxth	r2, r2
 8001684:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001688:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800168c:	b292      	uxth	r2, r2
 800168e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001692:	780a      	ldrb	r2, [r1, #0]
 8001694:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001698:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800169c:	d00b      	beq.n	80016b6 <USB_ActivateEndpoint+0x176>
 800169e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016a6:	051b      	lsls	r3, r3, #20
 80016a8:	0d1b      	lsrs	r3, r3, #20
 80016aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80016b6:	780a      	ldrb	r2, [r1, #0]
 80016b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80016d6:	e78b      	b.n	80015f0 <USB_ActivateEndpoint+0xb0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80016d8:	f3c4 024f 	ubfx	r2, r4, #1, #16
 80016dc:	f014 0f01 	tst.w	r4, #1
 80016e0:	d001      	beq.n	80016e6 <USB_ActivateEndpoint+0x1a6>
 80016e2:	3201      	adds	r2, #1
 80016e4:	b292      	uxth	r2, r2
 80016e6:	0292      	lsls	r2, r2, #10
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80016ee:	e7d0      	b.n	8001692 <USB_ActivateEndpoint+0x152>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80016f0:	780a      	ldrb	r2, [r1, #0]
 80016f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016f6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80016fa:	051b      	lsls	r3, r3, #20
 80016fc:	0d1b      	lsrs	r3, r3, #20
 80016fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001706:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800170a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800170e:	b29b      	uxth	r3, r3
 8001710:	780a      	ldrb	r2, [r1, #0]
 8001712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001716:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800171a:	88ca      	ldrh	r2, [r1, #6]
 800171c:	0852      	lsrs	r2, r2, #1
 800171e:	0052      	lsls	r2, r2, #1
 8001720:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001724:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001728:	b29b      	uxth	r3, r3
 800172a:	780a      	ldrb	r2, [r1, #0]
 800172c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001730:	3304      	adds	r3, #4
 8001732:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001736:	890a      	ldrh	r2, [r1, #8]
 8001738:	0852      	lsrs	r2, r2, #1
 800173a:	0052      	lsls	r2, r2, #1
 800173c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 8001740:	784b      	ldrb	r3, [r1, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d14b      	bne.n	80017de <USB_ActivateEndpoint+0x29e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001746:	780a      	ldrb	r2, [r1, #0]
 8001748:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800174c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001750:	d00b      	beq.n	800176a <USB_ActivateEndpoint+0x22a>
 8001752:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800175a:	051b      	lsls	r3, r3, #20
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001766:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800176a:	780a      	ldrb	r2, [r1, #0]
 800176c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001770:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001774:	d00b      	beq.n	800178e <USB_ActivateEndpoint+0x24e>
 8001776:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800177a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177e:	051b      	lsls	r3, r3, #20
 8001780:	0d1b      	lsrs	r3, r3, #20
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800178a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800178e:	780a      	ldrb	r2, [r1, #0]
 8001790:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001798:	051b      	lsls	r3, r3, #20
 800179a:	0d1b      	lsrs	r3, r3, #20
 800179c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017a8:	780a      	ldrb	r2, [r1, #0]
 80017aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80017bc:	f248 0480 	movw	r4, #32896	; 0x8080
 80017c0:	4323      	orrs	r3, r4
 80017c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80017c6:	780a      	ldrb	r2, [r1, #0]
 80017c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017d6:	4323      	orrs	r3, r4
 80017d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80017dc:	e708      	b.n	80015f0 <USB_ActivateEndpoint+0xb0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017de:	780a      	ldrb	r2, [r1, #0]
 80017e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80017e8:	d00b      	beq.n	8001802 <USB_ActivateEndpoint+0x2c2>
 80017ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017f2:	051b      	lsls	r3, r3, #20
 80017f4:	0d1b      	lsrs	r3, r3, #20
 80017f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001802:	780a      	ldrb	r2, [r1, #0]
 8001804:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001808:	f013 0f40 	tst.w	r3, #64	; 0x40
 800180c:	d00b      	beq.n	8001826 <USB_ActivateEndpoint+0x2e6>
 800180e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001816:	051b      	lsls	r3, r3, #20
 8001818:	0d1b      	lsrs	r3, r3, #20
 800181a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001822:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001826:	780a      	ldrb	r2, [r1, #0]
 8001828:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800182c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001830:	051b      	lsls	r3, r3, #20
 8001832:	0d1b      	lsrs	r3, r3, #20
 8001834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001840:	780b      	ldrb	r3, [r1, #0]
 8001842:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001846:	b292      	uxth	r2, r2
 8001848:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800184c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001850:	f248 0480 	movw	r4, #32896	; 0x8080
 8001854:	4322      	orrs	r2, r4
 8001856:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800185a:	780a      	ldrb	r2, [r1, #0]
 800185c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001860:	b29b      	uxth	r3, r3
 8001862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186a:	4323      	orrs	r3, r4
 800186c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001870:	e6be      	b.n	80015f0 <USB_ActivateEndpoint+0xb0>

08001872 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 8001872:	7a8b      	ldrb	r3, [r1, #10]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d144      	bne.n	8001902 <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 8001878:	784b      	ldrb	r3, [r1, #1]
 800187a:	b30b      	cbz	r3, 80018c0 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800187c:	780a      	ldrb	r2, [r1, #0]
 800187e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001882:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001886:	d00b      	beq.n	80018a0 <USB_DeactivateEndpoint+0x2e>
 8001888:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800188c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001890:	051b      	lsls	r3, r3, #20
 8001892:	0d1b      	lsrs	r3, r3, #20
 8001894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800189c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80018a0:	780a      	ldrb	r2, [r1, #0]
 80018a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80018bc:	2000      	movs	r0, #0
 80018be:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018c0:	780a      	ldrb	r2, [r1, #0]
 80018c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80018ca:	d00b      	beq.n	80018e4 <USB_DeactivateEndpoint+0x72>
 80018cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d4:	051b      	lsls	r3, r3, #20
 80018d6:	0d1b      	lsrs	r3, r3, #20
 80018d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018e4:	780a      	ldrb	r2, [r1, #0]
 80018e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001900:	e7dc      	b.n	80018bc <USB_DeactivateEndpoint+0x4a>
{
 8001902:	b410      	push	{r4}
    if (ep->is_in==0)
 8001904:	784b      	ldrb	r3, [r1, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d14b      	bne.n	80019a2 <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800190a:	780a      	ldrb	r2, [r1, #0]
 800190c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001910:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001914:	d00b      	beq.n	800192e <USB_DeactivateEndpoint+0xbc>
 8001916:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800191a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800191e:	051b      	lsls	r3, r3, #20
 8001920:	0d1b      	lsrs	r3, r3, #20
 8001922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800192e:	780a      	ldrb	r2, [r1, #0]
 8001930:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001934:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001938:	d00b      	beq.n	8001952 <USB_DeactivateEndpoint+0xe0>
 800193a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800193e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001942:	051b      	lsls	r3, r3, #20
 8001944:	0d1b      	lsrs	r3, r3, #20
 8001946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800194e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001952:	780a      	ldrb	r2, [r1, #0]
 8001954:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800195c:	051b      	lsls	r3, r3, #20
 800195e:	0d1b      	lsrs	r3, r3, #20
 8001960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001968:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800196c:	780b      	ldrb	r3, [r1, #0]
 800196e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001972:	b292      	uxth	r2, r2
 8001974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001978:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800197c:	f248 0480 	movw	r4, #32896	; 0x8080
 8001980:	4322      	orrs	r2, r4
 8001982:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001986:	780a      	ldrb	r2, [r1, #0]
 8001988:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001996:	4323      	orrs	r3, r4
 8001998:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800199c:	2000      	movs	r0, #0
 800199e:	bc10      	pop	{r4}
 80019a0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019a2:	780a      	ldrb	r2, [r1, #0]
 80019a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019a8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80019ac:	d00b      	beq.n	80019c6 <USB_DeactivateEndpoint+0x154>
 80019ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b6:	051b      	lsls	r3, r3, #20
 80019b8:	0d1b      	lsrs	r3, r3, #20
 80019ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019c6:	780a      	ldrb	r2, [r1, #0]
 80019c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019d0:	d00b      	beq.n	80019ea <USB_DeactivateEndpoint+0x178>
 80019d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019da:	051b      	lsls	r3, r3, #20
 80019dc:	0d1b      	lsrs	r3, r3, #20
 80019de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80019ea:	780a      	ldrb	r2, [r1, #0]
 80019ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	0d1b      	lsrs	r3, r3, #20
 80019f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a04:	780b      	ldrb	r3, [r1, #0]
 8001a06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a0a:	b292      	uxth	r2, r2
 8001a0c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a14:	f248 0480 	movw	r4, #32896	; 0x8080
 8001a18:	4322      	orrs	r2, r4
 8001a1a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a1e:	780a      	ldrb	r2, [r1, #0]
 8001a20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001a34:	e7b2      	b.n	800199c <USB_DeactivateEndpoint+0x12a>

08001a36 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001a36:	780a      	ldrb	r2, [r1, #0]
 8001a38:	b18a      	cbz	r2, 8001a5e <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 8001a3a:	784b      	ldrb	r3, [r1, #1]
 8001a3c:	bb13      	cbnz	r3, 8001a84 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001a3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001a5c:	e010      	b.n	8001a80 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001a5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a70:	f083 0310 	eor.w	r3, r3, #16
 8001a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8001a80:	2000      	movs	r0, #0
 8001a82:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001a84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a92:	f083 0310 	eor.w	r3, r3, #16
 8001a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001aa2:	e7ed      	b.n	8001a80 <USB_EPSetStall+0x4a>

08001aa4 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001aa4:	784b      	ldrb	r3, [r1, #1]
 8001aa6:	b31b      	cbz	r3, 8001af0 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001aa8:	780a      	ldrb	r2, [r1, #0]
 8001aaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ab2:	d00b      	beq.n	8001acc <USB_EPClearStall+0x28>
 8001ab4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001abc:	051b      	lsls	r3, r3, #20
 8001abe:	0d1b      	lsrs	r3, r3, #20
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ac8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001acc:	780a      	ldrb	r2, [r1, #0]
 8001ace:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001adc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8001aec:	2000      	movs	r0, #0
 8001aee:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001af0:	780a      	ldrb	r2, [r1, #0]
 8001af2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001af6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001afa:	d00b      	beq.n	8001b14 <USB_EPClearStall+0x70>
 8001afc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	0d1b      	lsrs	r3, r3, #20
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b14:	780a      	ldrb	r2, [r1, #0]
 8001b16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b24:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001b34:	e7da      	b.n	8001aec <USB_EPClearStall+0x48>

08001b36 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001b36:	b911      	cbnz	r1, 8001b3e <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001b3e:	2000      	movs	r0, #0
 8001b40:	4770      	bx	lr

08001b42 <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b42:	2000      	movs	r0, #0
 8001b44:	4770      	bx	lr

08001b46 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b46:	2000      	movs	r0, #0
 8001b48:	4770      	bx	lr

08001b4a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001b4a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001b4e:	b280      	uxth	r0, r0
 8001b50:	4770      	bx	lr

08001b52 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b52:	2000      	movs	r0, #0
 8001b54:	4770      	bx	lr

08001b56 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001b56:	3301      	adds	r3, #1
 8001b58:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b5a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8001b62:	b163      	cbz	r3, 8001b7e <USB_WritePMA+0x28>
{
 8001b64:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001b66:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001b68:	7848      	ldrb	r0, [r1, #1]
 8001b6a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8001b6e:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8001b72:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 8001b74:	3b01      	subs	r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f5      	bne.n	8001b66 <USB_WritePMA+0x10>
  }
}
 8001b7a:	bc10      	pop	{r4}
 8001b7c:	4770      	bx	lr
 8001b7e:	4770      	bx	lr

08001b80 <USB_EPStartXfer>:
{
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 8001b82:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001b84:	784c      	ldrb	r4, [r1, #1]
 8001b86:	2c01      	cmp	r4, #1
 8001b88:	d035      	beq.n	8001bf6 <USB_EPStartXfer+0x76>
    if (ep->xfer_len > ep->maxpacket)
 8001b8a:	690b      	ldr	r3, [r1, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f240 80f0 	bls.w	8001d72 <USB_EPStartXfer+0x1f2>
      ep->xfer_len-=len; 
 8001b92:	1ad2      	subs	r2, r2, r3
 8001b94:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 8001b96:	7a8a      	ldrb	r2, [r1, #10]
 8001b98:	2a00      	cmp	r2, #0
 8001b9a:	f040 80fa 	bne.w	8001d92 <USB_EPStartXfer+0x212>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b9e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	780c      	ldrb	r4, [r1, #0]
 8001ba6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001baa:	3206      	adds	r2, #6
 8001bac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8001bb2:	f240 80e2 	bls.w	8001d7a <USB_EPStartXfer+0x1fa>
 8001bb6:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001bba:	f013 0f1f 	tst.w	r3, #31
 8001bbe:	d101      	bne.n	8001bc4 <USB_EPStartXfer+0x44>
 8001bc0:	3c01      	subs	r4, #1
 8001bc2:	b2a4      	uxth	r4, r4
 8001bc4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001bc8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001bcc:	b2a4      	uxth	r4, r4
 8001bce:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001bd2:	780a      	ldrb	r2, [r1, #0]
 8001bd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8001bf6:	690f      	ldr	r7, [r1, #16]
 8001bf8:	42ba      	cmp	r2, r7
 8001bfa:	d926      	bls.n	8001c4a <USB_EPStartXfer+0xca>
      ep->xfer_len-=len; 
 8001bfc:	1bd2      	subs	r2, r2, r7
 8001bfe:	618a      	str	r2, [r1, #24]
 8001c00:	460e      	mov	r6, r1
 8001c02:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0) 
 8001c04:	7a8b      	ldrb	r3, [r1, #10]
 8001c06:	b323      	cbz	r3, 8001c52 <USB_EPStartXfer+0xd2>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001c08:	780b      	ldrb	r3, [r1, #0]
 8001c0a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c12:	d06c      	beq.n	8001cee <USB_EPStartXfer+0x16e>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	d139      	bne.n	8001c8c <USB_EPStartXfer+0x10c>
 8001c18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001c22:	3306      	adds	r3, #6
 8001c24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c28:	2f3e      	cmp	r7, #62	; 0x3e
 8001c2a:	d923      	bls.n	8001c74 <USB_EPStartXfer+0xf4>
 8001c2c:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8001c30:	f017 0f1f 	tst.w	r7, #31
 8001c34:	d101      	bne.n	8001c3a <USB_EPStartXfer+0xba>
 8001c36:	3a01      	subs	r2, #1
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001c3e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001c42:	b292      	uxth	r2, r2
 8001c44:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001c48:	e02a      	b.n	8001ca0 <USB_EPStartXfer+0x120>
      ep->xfer_len =0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8001c4e:	4617      	mov	r7, r2
 8001c50:	e7d6      	b.n	8001c00 <USB_EPStartXfer+0x80>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001c52:	b2bb      	uxth	r3, r7
 8001c54:	888a      	ldrh	r2, [r1, #4]
 8001c56:	6949      	ldr	r1, [r1, #20]
 8001c58:	f7ff ff7d 	bl	8001b56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c5c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	7832      	ldrb	r2, [r6, #0]
 8001c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001c68:	3302      	adds	r3, #2
 8001c6a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001c6e:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8001c72:	e02b      	b.n	8001ccc <USB_EPStartXfer+0x14c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c74:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8001c78:	f017 0f01 	tst.w	r7, #1
 8001c7c:	d001      	beq.n	8001c82 <USB_EPStartXfer+0x102>
 8001c7e:	3201      	adds	r2, #1
 8001c80:	b292      	uxth	r2, r2
 8001c82:	0292      	lsls	r2, r2, #10
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001c8a:	e009      	b.n	8001ca0 <USB_EPStartXfer+0x120>
 8001c8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c90:	b292      	uxth	r2, r2
 8001c92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001c96:	3302      	adds	r3, #2
 8001c98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c9c:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001ca0:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001ca2:	b2bb      	uxth	r3, r7
 8001ca4:	6971      	ldr	r1, [r6, #20]
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f7ff ff55 	bl	8001b56 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001cac:	7873      	ldrb	r3, [r6, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d14f      	bne.n	8001d52 <USB_EPStartXfer+0x1d2>
 8001cb2:	7832      	ldrb	r2, [r6, #0]
 8001cb4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cbc:	051b      	lsls	r3, r3, #20
 8001cbe:	0d1b      	lsrs	r3, r3, #20
 8001cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cc8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001ccc:	7832      	ldrb	r2, [r6, #0]
 8001cce:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cdc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001cec:	e781      	b.n	8001bf2 <USB_EPStartXfer+0x72>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cee:	bb24      	cbnz	r4, 8001d3a <USB_EPStartXfer+0x1ba>
 8001cf0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001d00:	2f3e      	cmp	r7, #62	; 0x3e
 8001d02:	d90e      	bls.n	8001d22 <USB_EPStartXfer+0x1a2>
 8001d04:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8001d08:	f017 0f1f 	tst.w	r7, #31
 8001d0c:	d101      	bne.n	8001d12 <USB_EPStartXfer+0x192>
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	b292      	uxth	r2, r2
 8001d12:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001d16:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001d20:	e015      	b.n	8001d4e <USB_EPStartXfer+0x1ce>
 8001d22:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8001d26:	f017 0f01 	tst.w	r7, #1
 8001d2a:	d001      	beq.n	8001d30 <USB_EPStartXfer+0x1b0>
 8001d2c:	3201      	adds	r2, #1
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	0292      	lsls	r2, r2, #10
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001d38:	e009      	b.n	8001d4e <USB_EPStartXfer+0x1ce>
 8001d3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001d44:	3302      	adds	r3, #2
 8001d46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001d4a:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8001d4e:	88f2      	ldrh	r2, [r6, #6]
 8001d50:	e7a7      	b.n	8001ca2 <USB_EPStartXfer+0x122>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d1ba      	bne.n	8001ccc <USB_EPStartXfer+0x14c>
 8001d56:	7832      	ldrb	r2, [r6, #0]
 8001d58:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d60:	051b      	lsls	r3, r3, #20
 8001d62:	0d1b      	lsrs	r3, r3, #20
 8001d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001d70:	e7ac      	b.n	8001ccc <USB_EPStartXfer+0x14c>
      ep->xfer_len =0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8001d76:	4613      	mov	r3, r2
 8001d78:	e70d      	b.n	8001b96 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001d7a:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001d7e:	f013 0f01 	tst.w	r3, #1
 8001d82:	d001      	beq.n	8001d88 <USB_EPStartXfer+0x208>
 8001d84:	3401      	adds	r4, #1
 8001d86:	b2a4      	uxth	r4, r4
 8001d88:	02a4      	lsls	r4, r4, #10
 8001d8a:	b2a4      	uxth	r4, r4
 8001d8c:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001d90:	e71f      	b.n	8001bd2 <USB_EPStartXfer+0x52>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d92:	b9c4      	cbnz	r4, 8001dc6 <USB_EPStartXfer+0x246>
 8001d94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	780c      	ldrb	r4, [r1, #0]
 8001d9c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001da0:	3202      	adds	r2, #2
 8001da2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001da6:	2b3e      	cmp	r3, #62	; 0x3e
 8001da8:	d929      	bls.n	8001dfe <USB_EPStartXfer+0x27e>
 8001daa:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001dae:	f013 0f1f 	tst.w	r3, #31
 8001db2:	d101      	bne.n	8001db8 <USB_EPStartXfer+0x238>
 8001db4:	3c01      	subs	r4, #1
 8001db6:	b2a4      	uxth	r4, r4
 8001db8:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001dbc:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001dc0:	b2a4      	uxth	r4, r4
 8001dc2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001dc6:	784a      	ldrb	r2, [r1, #1]
 8001dc8:	bb8a      	cbnz	r2, 8001e2e <USB_EPStartXfer+0x2ae>
 8001dca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	780c      	ldrb	r4, [r1, #0]
 8001dd2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001dd6:	3206      	adds	r2, #6
 8001dd8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001ddc:	2b3e      	cmp	r3, #62	; 0x3e
 8001dde:	d91a      	bls.n	8001e16 <USB_EPStartXfer+0x296>
 8001de0:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001de4:	f013 0f1f 	tst.w	r3, #31
 8001de8:	d101      	bne.n	8001dee <USB_EPStartXfer+0x26e>
 8001dea:	3c01      	subs	r4, #1
 8001dec:	b2a4      	uxth	r4, r4
 8001dee:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001df2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001df6:	b2a4      	uxth	r4, r4
 8001df8:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001dfc:	e6e9      	b.n	8001bd2 <USB_EPStartXfer+0x52>
 8001dfe:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001e02:	f013 0f01 	tst.w	r3, #1
 8001e06:	d001      	beq.n	8001e0c <USB_EPStartXfer+0x28c>
 8001e08:	3401      	adds	r4, #1
 8001e0a:	b2a4      	uxth	r4, r4
 8001e0c:	02a4      	lsls	r4, r4, #10
 8001e0e:	b2a4      	uxth	r4, r4
 8001e10:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001e14:	e7d7      	b.n	8001dc6 <USB_EPStartXfer+0x246>
 8001e16:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001e1a:	f013 0f01 	tst.w	r3, #1
 8001e1e:	d001      	beq.n	8001e24 <USB_EPStartXfer+0x2a4>
 8001e20:	3401      	adds	r4, #1
 8001e22:	b2a4      	uxth	r4, r4
 8001e24:	02a4      	lsls	r4, r4, #10
 8001e26:	b2a4      	uxth	r4, r4
 8001e28:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001e2c:	e6d1      	b.n	8001bd2 <USB_EPStartXfer+0x52>
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	f47f aecf 	bne.w	8001bd2 <USB_EPStartXfer+0x52>
 8001e34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	780c      	ldrb	r4, [r1, #0]
 8001e3c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001e40:	3202      	adds	r2, #2
 8001e42:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001e46:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001e4a:	e6c2      	b.n	8001bd2 <USB_EPStartXfer+0x52>

08001e4c <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e50:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8001e58:	e004      	b.n	8001e64 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001e5a:	6810      	ldr	r0, [r2, #0]
 8001e5c:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8001e60:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001e62:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f8      	bne.n	8001e5a <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8001e68:	4770      	bx	lr
	...

08001e6c <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8001e6c:	2322      	movs	r3, #34	; 0x22
 8001e6e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8001e70:	4800      	ldr	r0, [pc, #0]	; (8001e74 <USBD_HID_GetCfgDesc+0x8>)
 8001e72:	4770      	bx	lr
 8001e74:	20000088 	.word	0x20000088

08001e78 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001e78:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8001e80:	4770      	bx	lr
	...

08001e84 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8001e84:	230a      	movs	r3, #10
 8001e86:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8001e88:	4800      	ldr	r0, [pc, #0]	; (8001e8c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8001e8a:	4770      	bx	lr
 8001e8c:	200000b8 	.word	0x200000b8

08001e90 <USBD_HID_Setup>:
{
 8001e90:	b510      	push	{r4, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8001e92:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e96:	780b      	ldrb	r3, [r1, #0]
 8001e98:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 8001e9c:	d025      	beq.n	8001eea <USBD_HID_Setup+0x5a>
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d14f      	bne.n	8001f42 <USBD_HID_Setup+0xb2>
    switch (req->bRequest)
 8001ea2:	784b      	ldrb	r3, [r1, #1]
 8001ea4:	3b02      	subs	r3, #2
 8001ea6:	2b09      	cmp	r3, #9
 8001ea8:	d81b      	bhi.n	8001ee2 <USBD_HID_Setup+0x52>
 8001eaa:	e8df f003 	tbb	[pc, r3]
 8001eae:	0914      	.short	0x0914
 8001eb0:	1a1a1a1a 	.word	0x1a1a1a1a
 8001eb4:	050f1a1a 	.word	0x050f1a1a
      hhid->Protocol = (uint8_t)(req->wValue);
 8001eb8:	788b      	ldrb	r3, [r1, #2]
 8001eba:	6023      	str	r3, [r4, #0]
  return USBD_OK;
 8001ebc:	2000      	movs	r0, #0
      break;
 8001ebe:	bd10      	pop	{r4, pc}
      USBD_CtlSendData (pdev, 
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	f000 fc29 	bl	800271a <USBD_CtlSendData>
  return USBD_OK;
 8001ec8:	2000      	movs	r0, #0
      break;
 8001eca:	bd10      	pop	{r4, pc}
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001ecc:	884b      	ldrh	r3, [r1, #2]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	6063      	str	r3, [r4, #4]
  return USBD_OK;
 8001ed2:	2000      	movs	r0, #0
      break;
 8001ed4:	bd10      	pop	{r4, pc}
      USBD_CtlSendData (pdev, 
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	1d21      	adds	r1, r4, #4
 8001eda:	f000 fc1e 	bl	800271a <USBD_CtlSendData>
  return USBD_OK;
 8001ede:	2000      	movs	r0, #0
      break;      
 8001ee0:	bd10      	pop	{r4, pc}
      USBD_CtlError (pdev, req);
 8001ee2:	f000 f9ca 	bl	800227a <USBD_CtlError>
      return USBD_FAIL; 
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	bd10      	pop	{r4, pc}
    switch (req->bRequest)
 8001eea:	784b      	ldrb	r3, [r1, #1]
 8001eec:	2b0a      	cmp	r3, #10
 8001eee:	d01d      	beq.n	8001f2c <USBD_HID_Setup+0x9c>
 8001ef0:	2b0b      	cmp	r3, #11
 8001ef2:	d022      	beq.n	8001f3a <USBD_HID_Setup+0xaa>
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d001      	beq.n	8001efc <USBD_HID_Setup+0x6c>
  return USBD_OK;
 8001ef8:	2000      	movs	r0, #0
}
 8001efa:	bd10      	pop	{r4, pc}
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8001efc:	884b      	ldrh	r3, [r1, #2]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	2b22      	cmp	r3, #34	; 0x22
 8001f02:	d007      	beq.n	8001f14 <USBD_HID_Setup+0x84>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8001f04:	2b21      	cmp	r3, #33	; 0x21
 8001f06:	d00b      	beq.n	8001f20 <USBD_HID_Setup+0x90>
  uint8_t  *pbuf = NULL;
 8001f08:	2100      	movs	r1, #0
  uint16_t len = 0;
 8001f0a:	460a      	mov	r2, r1
      USBD_CtlSendData (pdev, 
 8001f0c:	f000 fc05 	bl	800271a <USBD_CtlSendData>
  return USBD_OK;
 8001f10:	2000      	movs	r0, #0
      break;
 8001f12:	bd10      	pop	{r4, pc}
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8001f14:	88ca      	ldrh	r2, [r1, #6]
 8001f16:	2a4e      	cmp	r2, #78	; 0x4e
 8001f18:	bf28      	it	cs
 8001f1a:	224e      	movcs	r2, #78	; 0x4e
        pbuf = HID_CUSTOM_ReportDesc;
 8001f1c:	490a      	ldr	r1, [pc, #40]	; (8001f48 <USBD_HID_Setup+0xb8>)
 8001f1e:	e7f5      	b.n	8001f0c <USBD_HID_Setup+0x7c>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8001f20:	88ca      	ldrh	r2, [r1, #6]
 8001f22:	2a09      	cmp	r2, #9
 8001f24:	bf28      	it	cs
 8001f26:	2209      	movcs	r2, #9
        pbuf = USBD_HID_Desc;   
 8001f28:	4908      	ldr	r1, [pc, #32]	; (8001f4c <USBD_HID_Setup+0xbc>)
 8001f2a:	e7ef      	b.n	8001f0c <USBD_HID_Setup+0x7c>
      USBD_CtlSendData (pdev,
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f104 0108 	add.w	r1, r4, #8
 8001f32:	f000 fbf2 	bl	800271a <USBD_CtlSendData>
  return USBD_OK;
 8001f36:	2000      	movs	r0, #0
      break;
 8001f38:	bd10      	pop	{r4, pc}
      hhid->AltSetting = (uint8_t)(req->wValue);
 8001f3a:	788b      	ldrb	r3, [r1, #2]
 8001f3c:	60a3      	str	r3, [r4, #8]
  return USBD_OK;
 8001f3e:	2000      	movs	r0, #0
      break;
 8001f40:	bd10      	pop	{r4, pc}
  return USBD_OK;
 8001f42:	2000      	movs	r0, #0
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	200000ac 	.word	0x200000ac

08001f50 <USBD_HID_DeInit>:
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001f54:	2181      	movs	r1, #129	; 0x81
 8001f56:	f000 ffda 	bl	8002f0e <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001f5a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001f5e:	b120      	cbz	r0, 8001f6a <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 8001f60:	f001 f840 	bl	8002fe4 <USBD_static_free>
    pdev->pClassData = NULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	bd10      	pop	{r4, pc}

08001f6e <USBD_HID_Init>:
{
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8001f72:	2305      	movs	r3, #5
 8001f74:	2203      	movs	r2, #3
 8001f76:	2181      	movs	r1, #129	; 0x81
 8001f78:	f000 ffb8 	bl	8002eec <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8001f7c:	2010      	movs	r0, #16
 8001f7e:	f001 f82d 	bl	8002fdc <USBD_static_malloc>
 8001f82:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001f86:	b118      	cbz	r0, 8001f90 <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd10      	pop	{r4, pc}
    ret = 1; 
 8001f90:	2001      	movs	r0, #1
}
 8001f92:	bd10      	pop	{r4, pc}

08001f94 <USBD_HID_SendReport>:
{
 8001f94:	b538      	push	{r3, r4, r5, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8001f96:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8001f9a:	f890 41fc 	ldrb.w	r4, [r0, #508]	; 0x1fc
 8001f9e:	2c03      	cmp	r4, #3
 8001fa0:	d001      	beq.n	8001fa6 <USBD_HID_SendReport+0x12>
}
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
    if(hhid->state == HID_IDLE)
 8001fa6:	7b2b      	ldrb	r3, [r5, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1fa      	bne.n	8001fa2 <USBD_HID_SendReport+0xe>
 8001fac:	4613      	mov	r3, r2
 8001fae:	460a      	mov	r2, r1
      hhid->state = HID_BUSY;
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	7329      	strb	r1, [r5, #12]
      USBD_LL_Transmit (pdev, 
 8001fb4:	2181      	movs	r1, #129	; 0x81
 8001fb6:	f000 fff5 	bl	8002fa4 <USBD_LL_Transmit>
 8001fba:	e7f2      	b.n	8001fa2 <USBD_HID_SendReport+0xe>

08001fbc <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001fbc:	b198      	cbz	r0, 8001fe6 <USBD_Init+0x2a>
{
 8001fbe:	b508      	push	{r3, lr}
 8001fc0:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001fc2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001fc6:	b110      	cbz	r0, 8001fce <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001fce:	b109      	cbz	r1, 8001fd4 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8001fd0:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8001fd4:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8001fdc:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001fde:	f000 ff3d 	bl	8002e5c <USBD_LL_Init>
  
  return USBD_OK; 
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	4770      	bx	lr

08001fea <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001fea:	b119      	cbz	r1, 8001ff4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001fec:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001ff4:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001ff6:	4770      	bx	lr

08001ff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001ff8:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001ffa:	f000 ff69 	bl	8002ed0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001ffe:	2000      	movs	r0, #0
 8002000:	bd08      	pop	{r3, pc}

08002002 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002002:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002004:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002008:	b123      	cbz	r3, 8002014 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4798      	blx	r3
 800200e:	b118      	cbz	r0, 8002018 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002010:	2002      	movs	r0, #2
 8002012:	bd08      	pop	{r3, pc}
 8002014:	2002      	movs	r0, #2
 8002016:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 8002018:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 800201a:	bd08      	pop	{r3, pc}

0800201c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800201c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800201e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4798      	blx	r3
  return USBD_OK;
}
 8002026:	2000      	movs	r0, #0
 8002028:	bd08      	pop	{r3, pc}

0800202a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800202a:	b538      	push	{r3, r4, r5, lr}
 800202c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800202e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002032:	4628      	mov	r0, r5
 8002034:	f000 f90d 	bl	8002252 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002038:	2301      	movs	r3, #1
 800203a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800203e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002042:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002046:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 800204a:	f001 031f 	and.w	r3, r1, #31
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00e      	beq.n	8002070 <USBD_LL_SetupStage+0x46>
 8002052:	b13b      	cbz	r3, 8002064 <USBD_LL_SetupStage+0x3a>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d010      	beq.n	800207a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002058:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800205c:	4620      	mov	r0, r4
 800205e:	f000 ff64 	bl	8002f2a <USBD_LL_StallEP>
    break;
 8002062:	e003      	b.n	800206c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002064:	4629      	mov	r1, r5
 8002066:	4620      	mov	r0, r4
 8002068:	f000 fa6e 	bl	8002548 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800206c:	2000      	movs	r0, #0
 800206e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002070:	4629      	mov	r1, r5
 8002072:	4620      	mov	r0, r4
 8002074:	f000 fa8c 	bl	8002590 <USBD_StdItfReq>
    break;
 8002078:	e7f8      	b.n	800206c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800207a:	4629      	mov	r1, r5
 800207c:	4620      	mov	r0, r4
 800207e:	f000 faa3 	bl	80025c8 <USBD_StdEPReq>
    break;
 8002082:	e7f3      	b.n	800206c <USBD_LL_SetupStage+0x42>

08002084 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002084:	b510      	push	{r4, lr}
 8002086:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002088:	bb19      	cbnz	r1, 80020d2 <USBD_LL_DataOutStage+0x4e>
 800208a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800208c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002090:	2a03      	cmp	r2, #3
 8002092:	d127      	bne.n	80020e4 <USBD_LL_DataOutStage+0x60>
    {
      if(pep->rem_length > pep->maxpacket)
 8002094:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8002098:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800209c:	4291      	cmp	r1, r2
 800209e:	d80b      	bhi.n	80020b8 <USBD_LL_DataOutStage+0x34>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	b11b      	cbz	r3, 80020b0 <USBD_LL_DataOutStage+0x2c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80020a8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020ac:	2a03      	cmp	r2, #3
 80020ae:	d00e      	beq.n	80020ce <USBD_LL_DataOutStage+0x4a>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f000 fb4f 	bl	8002754 <USBD_CtlSendStatus>
 80020b6:	e015      	b.n	80020e4 <USBD_LL_DataOutStage+0x60>
        pep->rem_length -=  pep->maxpacket;
 80020b8:	1a89      	subs	r1, r1, r2
 80020ba:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 80020be:	428a      	cmp	r2, r1
 80020c0:	bf28      	it	cs
 80020c2:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 80020c4:	b292      	uxth	r2, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f000 fb3c 	bl	8002744 <USBD_CtlContinueRx>
 80020cc:	e00a      	b.n	80020e4 <USBD_LL_DataOutStage+0x60>
          pdev->pClass->EP0_RxReady(pdev); 
 80020ce:	4798      	blx	r3
 80020d0:	e7ee      	b.n	80020b0 <USBD_LL_DataOutStage+0x2c>
 80020d2:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80020d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	b11b      	cbz	r3, 80020e4 <USBD_LL_DataOutStage+0x60>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80020dc:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80020e0:	2903      	cmp	r1, #3
 80020e2:	d001      	beq.n	80020e8 <USBD_LL_DataOutStage+0x64>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80020e4:	2000      	movs	r0, #0
 80020e6:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 80020e8:	4611      	mov	r1, r2
 80020ea:	4798      	blx	r3
 80020ec:	e7fa      	b.n	80020e4 <USBD_LL_DataOutStage+0x60>

080020ee <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80020ee:	b510      	push	{r4, lr}
 80020f0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80020f2:	2900      	cmp	r1, #0
 80020f4:	d147      	bne.n	8002186 <USBD_LL_DataInStage+0x98>
 80020f6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80020f8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80020fc:	2a02      	cmp	r2, #2
 80020fe:	d005      	beq.n	800210c <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002100:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002104:	2b01      	cmp	r3, #1
 8002106:	d03a      	beq.n	800217e <USBD_LL_DataInStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002108:	2000      	movs	r0, #0
 800210a:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800210c:	69c1      	ldr	r1, [r0, #28]
 800210e:	6a02      	ldr	r2, [r0, #32]
 8002110:	4291      	cmp	r1, r2
 8002112:	d817      	bhi.n	8002144 <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 8002114:	6981      	ldr	r1, [r0, #24]
 8002116:	fbb1 f3f2 	udiv	r3, r1, r2
 800211a:	fb02 1313 	mls	r3, r2, r3, r1
 800211e:	b92b      	cbnz	r3, 800212c <USBD_LL_DataInStage+0x3e>
 8002120:	428a      	cmp	r2, r1
 8002122:	d803      	bhi.n	800212c <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 8002124:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8002128:	4299      	cmp	r1, r3
 800212a:	d318      	bcc.n	800215e <USBD_LL_DataInStage+0x70>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800212c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	b11b      	cbz	r3, 800213c <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002134:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002138:	2a03      	cmp	r2, #3
 800213a:	d01d      	beq.n	8002178 <USBD_LL_DataInStage+0x8a>
          USBD_CtlReceiveStatus(pdev);
 800213c:	4620      	mov	r0, r4
 800213e:	f000 fb14 	bl	800276a <USBD_CtlReceiveStatus>
 8002142:	e7dd      	b.n	8002100 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8002144:	1a8a      	subs	r2, r1, r2
 8002146:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8002148:	b292      	uxth	r2, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f000 faf2 	bl	8002734 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8002150:	2300      	movs	r3, #0
 8002152:	461a      	mov	r2, r3
 8002154:	4619      	mov	r1, r3
 8002156:	4620      	mov	r0, r4
 8002158:	f000 ff32 	bl	8002fc0 <USBD_LL_PrepareReceive>
 800215c:	e7d0      	b.n	8002100 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	4611      	mov	r1, r2
 8002162:	f000 fae7 	bl	8002734 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002166:	2100      	movs	r1, #0
 8002168:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800216c:	460b      	mov	r3, r1
 800216e:	460a      	mov	r2, r1
 8002170:	4620      	mov	r0, r4
 8002172:	f000 ff25 	bl	8002fc0 <USBD_LL_PrepareReceive>
 8002176:	e7c3      	b.n	8002100 <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 8002178:	4620      	mov	r0, r4
 800217a:	4798      	blx	r3
 800217c:	e7de      	b.n	800213c <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8002184:	e7c0      	b.n	8002108 <USBD_LL_DataInStage+0x1a>
 8002186:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8002188:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ba      	beq.n	8002108 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002192:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8002196:	2903      	cmp	r1, #3
 8002198:	d1b6      	bne.n	8002108 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 800219a:	4611      	mov	r1, r2
 800219c:	4798      	blx	r3
 800219e:	e7b3      	b.n	8002108 <USBD_LL_DataInStage+0x1a>

080021a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80021a4:	2340      	movs	r3, #64	; 0x40
 80021a6:	2200      	movs	r2, #0
 80021a8:	4611      	mov	r1, r2
 80021aa:	f000 fe9f 	bl	8002eec <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021ae:	2540      	movs	r5, #64	; 0x40
 80021b0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80021b4:	462b      	mov	r3, r5
 80021b6:	2200      	movs	r2, #0
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	4620      	mov	r0, r4
 80021bc:	f000 fe96 	bl	8002eec <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80021c0:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80021c8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80021cc:	b12b      	cbz	r3, 80021da <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80021ce:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	7921      	ldrb	r1, [r4, #4]
 80021d6:	4620      	mov	r0, r4
 80021d8:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80021da:	2000      	movs	r0, #0
 80021dc:	bd38      	pop	{r3, r4, r5, pc}

080021de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80021de:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80021e0:	2000      	movs	r0, #0
 80021e2:	4770      	bx	lr

080021e4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80021e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021e8:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80021ec:	2304      	movs	r3, #4
 80021ee:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021f2:	2000      	movs	r0, #0
 80021f4:	4770      	bx	lr

080021f6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80021f6:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80021fa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021fe:	2000      	movs	r0, #0
 8002200:	4770      	bx	lr

08002202 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002202:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002204:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002208:	2b03      	cmp	r3, #3
 800220a:	d001      	beq.n	8002210 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800220c:	2000      	movs	r0, #0
 800220e:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8002210:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f8      	beq.n	800220c <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800221a:	4798      	blx	r3
 800221c:	e7f6      	b.n	800220c <USBD_LL_SOF+0xa>

0800221e <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 800221e:	2300      	movs	r3, #0

    while (*buf != '\0') 
 8002220:	e002      	b.n	8002228 <USBD_GetLen+0xa>
    {
        len++;
 8002222:	3301      	adds	r3, #1
 8002224:	b2db      	uxtb	r3, r3
        buf++;
 8002226:	3001      	adds	r0, #1
    while (*buf != '\0') 
 8002228:	7802      	ldrb	r2, [r0, #0]
 800222a:	2a00      	cmp	r2, #0
 800222c:	d1f9      	bne.n	8002222 <USBD_GetLen+0x4>
    }

    return len;
}
 800222e:	4618      	mov	r0, r3
 8002230:	4770      	bx	lr

08002232 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002232:	884b      	ldrh	r3, [r1, #2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d000      	beq.n	800223a <USBD_SetFeature+0x8>
 8002238:	4770      	bx	lr
{
 800223a:	b510      	push	{r4, lr}
 800223c:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 800223e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8002242:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800224a:	4620      	mov	r0, r4
 800224c:	f000 fa82 	bl	8002754 <USBD_CtlSendStatus>
 8002250:	bd10      	pop	{r4, pc}

08002252 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002252:	780b      	ldrb	r3, [r1, #0]
 8002254:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002256:	784b      	ldrb	r3, [r1, #1]
 8002258:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800225a:	788b      	ldrb	r3, [r1, #2]
 800225c:	78ca      	ldrb	r2, [r1, #3]
 800225e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002262:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002264:	790b      	ldrb	r3, [r1, #4]
 8002266:	794a      	ldrb	r2, [r1, #5]
 8002268:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800226c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800226e:	798b      	ldrb	r3, [r1, #6]
 8002270:	79ca      	ldrb	r2, [r1, #7]
 8002272:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002276:	80c3      	strh	r3, [r0, #6]
 8002278:	4770      	bx	lr

0800227a <USBD_CtlError>:
{
 800227a:	b510      	push	{r4, lr}
 800227c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	f000 fe53 	bl	8002f2a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002284:	2100      	movs	r1, #0
 8002286:	4620      	mov	r0, r4
 8002288:	f000 fe4f 	bl	8002f2a <USBD_LL_StallEP>
 800228c:	bd10      	pop	{r4, pc}

0800228e <USBD_GetDescriptor>:
{
 800228e:	b530      	push	{r4, r5, lr}
 8002290:	b083      	sub	sp, #12
 8002292:	4604      	mov	r4, r0
 8002294:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 8002296:	884a      	ldrh	r2, [r1, #2]
 8002298:	0a13      	lsrs	r3, r2, #8
 800229a:	3b01      	subs	r3, #1
 800229c:	2b06      	cmp	r3, #6
 800229e:	f200 8081 	bhi.w	80023a4 <USBD_GetDescriptor+0x116>
 80022a2:	e8df f003 	tbb	[pc, r3]
 80022a6:	1304      	.short	0x1304
 80022a8:	637f7f27 	.word	0x637f7f27
 80022ac:	70          	.byte	0x70
 80022ad:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80022ae:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f10d 0106 	add.w	r1, sp, #6
 80022b8:	7c00      	ldrb	r0, [r0, #16]
 80022ba:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80022bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80022c0:	b112      	cbz	r2, 80022c8 <USBD_GetDescriptor+0x3a>
 80022c2:	88eb      	ldrh	r3, [r5, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d171      	bne.n	80023ac <USBD_GetDescriptor+0x11e>
}
 80022c8:	b003      	add	sp, #12
 80022ca:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80022cc:	7c03      	ldrb	r3, [r0, #16]
 80022ce:	b943      	cbnz	r3, 80022e2 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80022d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f10d 0006 	add.w	r0, sp, #6
 80022da:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80022dc:	2302      	movs	r3, #2
 80022de:	7043      	strb	r3, [r0, #1]
 80022e0:	e7ec      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80022e2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f10d 0006 	add.w	r0, sp, #6
 80022ec:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80022ee:	2302      	movs	r3, #2
 80022f0:	7043      	strb	r3, [r0, #1]
 80022f2:	e7e3      	b.n	80022bc <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	2a05      	cmp	r2, #5
 80022f8:	d834      	bhi.n	8002364 <USBD_GetDescriptor+0xd6>
 80022fa:	e8df f002 	tbb	[pc, r2]
 80022fe:	0b03      	.short	0x0b03
 8002300:	2b231b13 	.word	0x2b231b13
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002304:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f10d 0106 	add.w	r1, sp, #6
 800230e:	7c00      	ldrb	r0, [r0, #16]
 8002310:	4798      	blx	r3
      break;
 8002312:	e7d3      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002314:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f10d 0106 	add.w	r1, sp, #6
 800231e:	7c00      	ldrb	r0, [r0, #16]
 8002320:	4798      	blx	r3
      break;
 8002322:	e7cb      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002324:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f10d 0106 	add.w	r1, sp, #6
 800232e:	7c00      	ldrb	r0, [r0, #16]
 8002330:	4798      	blx	r3
      break;
 8002332:	e7c3      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002334:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f10d 0106 	add.w	r1, sp, #6
 800233e:	7c00      	ldrb	r0, [r0, #16]
 8002340:	4798      	blx	r3
      break;
 8002342:	e7bb      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002344:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f10d 0106 	add.w	r1, sp, #6
 800234e:	7c00      	ldrb	r0, [r0, #16]
 8002350:	4798      	blx	r3
      break;
 8002352:	e7b3      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002354:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f10d 0106 	add.w	r1, sp, #6
 800235e:	7c00      	ldrb	r0, [r0, #16]
 8002360:	4798      	blx	r3
      break;
 8002362:	e7ab      	b.n	80022bc <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 8002364:	4629      	mov	r1, r5
 8002366:	f7ff ff88 	bl	800227a <USBD_CtlError>
      return;
 800236a:	e7ad      	b.n	80022c8 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800236c:	7c03      	ldrb	r3, [r0, #16]
 800236e:	b933      	cbnz	r3, 800237e <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002370:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	f10d 0006 	add.w	r0, sp, #6
 800237a:	4798      	blx	r3
      break;
 800237c:	e79e      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 800237e:	4629      	mov	r1, r5
 8002380:	f7ff ff7b 	bl	800227a <USBD_CtlError>
      return;
 8002384:	e7a0      	b.n	80022c8 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002386:	7c03      	ldrb	r3, [r0, #16]
 8002388:	b943      	cbnz	r3, 800239c <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800238a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f10d 0006 	add.w	r0, sp, #6
 8002394:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002396:	2307      	movs	r3, #7
 8002398:	7043      	strb	r3, [r0, #1]
      break; 
 800239a:	e78f      	b.n	80022bc <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 800239c:	4629      	mov	r1, r5
 800239e:	f7ff ff6c 	bl	800227a <USBD_CtlError>
      return;
 80023a2:	e791      	b.n	80022c8 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7ff ff68 	bl	800227a <USBD_CtlError>
    return;
 80023aa:	e78d      	b.n	80022c8 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 80023ac:	429a      	cmp	r2, r3
 80023ae:	bf28      	it	cs
 80023b0:	461a      	movcs	r2, r3
 80023b2:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80023b6:	4601      	mov	r1, r0
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 f9ae 	bl	800271a <USBD_CtlSendData>
 80023be:	e783      	b.n	80022c8 <USBD_GetDescriptor+0x3a>

080023c0 <USBD_SetAddress>:
{
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80023c4:	888b      	ldrh	r3, [r1, #4]
 80023c6:	b9e3      	cbnz	r3, 8002402 <USBD_SetAddress+0x42>
 80023c8:	88cb      	ldrh	r3, [r1, #6]
 80023ca:	b9d3      	cbnz	r3, 8002402 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80023cc:	788d      	ldrb	r5, [r1, #2]
 80023ce:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80023d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d00c      	beq.n	80023f4 <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 80023da:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80023de:	4629      	mov	r1, r5
 80023e0:	f000 fdd2 	bl	8002f88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80023e4:	4620      	mov	r0, r4
 80023e6:	f000 f9b5 	bl	8002754 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80023ea:	b135      	cbz	r5, 80023fa <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80023ec:	2302      	movs	r3, #2
 80023ee:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 80023f4:	f7ff ff41 	bl	800227a <USBD_CtlError>
 80023f8:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80023fa:	2301      	movs	r3, #1
 80023fc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002400:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                        
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff ff39 	bl	800227a <USBD_CtlError>
 8002408:	bd38      	pop	{r3, r4, r5, pc}
	...

0800240c <USBD_SetConfig>:
{
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8002412:	7889      	ldrb	r1, [r1, #2]
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <USBD_SetConfig+0xa0>)
 8002416:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002418:	2901      	cmp	r1, #1
 800241a:	d809      	bhi.n	8002430 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 800241c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002420:	2b02      	cmp	r3, #2
 8002422:	d009      	beq.n	8002438 <USBD_SetConfig+0x2c>
 8002424:	2b03      	cmp	r3, #3
 8002426:	d01c      	beq.n	8002462 <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8002428:	4629      	mov	r1, r5
 800242a:	f7ff ff26 	bl	800227a <USBD_CtlError>
 800242e:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                              
 8002430:	4629      	mov	r1, r5
 8002432:	f7ff ff22 	bl	800227a <USBD_CtlError>
 8002436:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8002438:	b181      	cbz	r1, 800245c <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 800243a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800243c:	2303      	movs	r3, #3
 800243e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002442:	f7ff fdde 	bl	8002002 <USBD_SetClassConfig>
 8002446:	2802      	cmp	r0, #2
 8002448:	d003      	beq.n	8002452 <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 800244a:	4620      	mov	r0, r4
 800244c:	f000 f982 	bl	8002754 <USBD_CtlSendStatus>
 8002450:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 8002452:	4629      	mov	r1, r5
 8002454:	4620      	mov	r0, r4
 8002456:	f7ff ff10 	bl	800227a <USBD_CtlError>
          return;
 800245a:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 800245c:	f000 f97a 	bl	8002754 <USBD_CtlSendStatus>
 8002460:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0) 
 8002462:	b189      	cbz	r1, 8002488 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 8002464:	6843      	ldr	r3, [r0, #4]
 8002466:	4299      	cmp	r1, r3
 8002468:	d01d      	beq.n	80024a6 <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	f7ff fdd6 	bl	800201c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <USBD_SetConfig+0xa0>)
 8002472:	7819      	ldrb	r1, [r3, #0]
 8002474:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff fdc3 	bl	8002002 <USBD_SetClassConfig>
 800247c:	2802      	cmp	r0, #2
 800247e:	d00d      	beq.n	800249c <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8002480:	4620      	mov	r0, r4
 8002482:	f000 f967 	bl	8002754 <USBD_CtlSendStatus>
 8002486:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002488:	2302      	movs	r3, #2
 800248a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800248e:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002490:	f7ff fdc4 	bl	800201c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8002494:	4620      	mov	r0, r4
 8002496:	f000 f95d 	bl	8002754 <USBD_CtlSendStatus>
 800249a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 800249c:	4629      	mov	r1, r5
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff feeb 	bl	800227a <USBD_CtlError>
          return;
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 80024a6:	f000 f955 	bl	8002754 <USBD_CtlSendStatus>
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
 80024ac:	20000118 	.word	0x20000118

080024b0 <USBD_GetConfig>:
{
 80024b0:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 80024b2:	88cb      	ldrh	r3, [r1, #6]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d108      	bne.n	80024ca <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 80024b8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d007      	beq.n	80024d0 <USBD_GetConfig+0x20>
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d00d      	beq.n	80024e0 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 80024c4:	f7ff fed9 	bl	800227a <USBD_CtlError>
 80024c8:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 80024ca:	f7ff fed6 	bl	800227a <USBD_CtlError>
 80024ce:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 80024d0:	4601      	mov	r1, r0
 80024d2:	2300      	movs	r3, #0
 80024d4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80024d8:	2201      	movs	r2, #1
 80024da:	f000 f91e 	bl	800271a <USBD_CtlSendData>
      break;
 80024de:	bd08      	pop	{r3, pc}
      USBD_CtlSendData (pdev, 
 80024e0:	2201      	movs	r2, #1
 80024e2:	1d01      	adds	r1, r0, #4
 80024e4:	f000 f919 	bl	800271a <USBD_CtlSendData>
      break;
 80024e8:	bd08      	pop	{r3, pc}

080024ea <USBD_GetStatus>:
{
 80024ea:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 80024ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024f0:	3b02      	subs	r3, #2
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d80c      	bhi.n	8002510 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80024f6:	2301      	movs	r3, #1
 80024f8:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80024fa:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80024fe:	b10b      	cbz	r3, 8002504 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002500:	2303      	movs	r3, #3
 8002502:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002504:	2202      	movs	r2, #2
 8002506:	f100 010c 	add.w	r1, r0, #12
 800250a:	f000 f906 	bl	800271a <USBD_CtlSendData>
    break;
 800250e:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8002510:	f7ff feb3 	bl	800227a <USBD_CtlError>
 8002514:	bd08      	pop	{r3, pc}

08002516 <USBD_ClrFeature>:
{
 8002516:	b510      	push	{r4, lr}
 8002518:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 800251a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800251e:	3b02      	subs	r3, #2
 8002520:	2b01      	cmp	r3, #1
 8002522:	d80e      	bhi.n	8002542 <USBD_ClrFeature+0x2c>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002524:	884b      	ldrh	r3, [r1, #2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d000      	beq.n	800252c <USBD_ClrFeature+0x16>
 800252a:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 800252c:	2300      	movs	r3, #0
 800252e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002532:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800253a:	4620      	mov	r0, r4
 800253c:	f000 f90a 	bl	8002754 <USBD_CtlSendStatus>
 8002540:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8002542:	f7ff fe9a 	bl	800227a <USBD_CtlError>
}
 8002546:	e7f0      	b.n	800252a <USBD_ClrFeature+0x14>

08002548 <USBD_StdDevReq>:
{
 8002548:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 800254a:	784b      	ldrb	r3, [r1, #1]
 800254c:	2b09      	cmp	r3, #9
 800254e:	d81c      	bhi.n	800258a <USBD_StdDevReq+0x42>
 8002550:	e8df f003 	tbb	[pc, r3]
 8002554:	151b1812 	.word	0x151b1812
 8002558:	1b05091b 	.word	0x1b05091b
 800255c:	0c0f      	.short	0x0c0f
    USBD_GetDescriptor (pdev, req) ;
 800255e:	f7ff fe96 	bl	800228e <USBD_GetDescriptor>
}
 8002562:	2000      	movs	r0, #0
 8002564:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 8002566:	f7ff ff2b 	bl	80023c0 <USBD_SetAddress>
    break;
 800256a:	e7fa      	b.n	8002562 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 800256c:	f7ff ff4e 	bl	800240c <USBD_SetConfig>
    break;
 8002570:	e7f7      	b.n	8002562 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8002572:	f7ff ff9d 	bl	80024b0 <USBD_GetConfig>
    break;
 8002576:	e7f4      	b.n	8002562 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 8002578:	f7ff ffb7 	bl	80024ea <USBD_GetStatus>
    break;
 800257c:	e7f1      	b.n	8002562 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 800257e:	f7ff fe58 	bl	8002232 <USBD_SetFeature>
    break;
 8002582:	e7ee      	b.n	8002562 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 8002584:	f7ff ffc7 	bl	8002516 <USBD_ClrFeature>
    break;
 8002588:	e7eb      	b.n	8002562 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 800258a:	f7ff fe76 	bl	800227a <USBD_CtlError>
    break;
 800258e:	e7e8      	b.n	8002562 <USBD_StdDevReq+0x1a>

08002590 <USBD_StdItfReq>:
{
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002596:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800259a:	2b03      	cmp	r3, #3
 800259c:	d111      	bne.n	80025c2 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800259e:	790b      	ldrb	r3, [r1, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d903      	bls.n	80025ac <USBD_StdItfReq+0x1c>
       USBD_CtlError(pdev , req);
 80025a4:	f7ff fe69 	bl	800227a <USBD_CtlError>
}
 80025a8:	2000      	movs	r0, #0
 80025aa:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 80025ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80025b4:	88eb      	ldrh	r3, [r5, #6]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f6      	bne.n	80025a8 <USBD_StdItfReq+0x18>
         USBD_CtlSendStatus(pdev);
 80025ba:	4620      	mov	r0, r4
 80025bc:	f000 f8ca 	bl	8002754 <USBD_CtlSendStatus>
 80025c0:	e7f2      	b.n	80025a8 <USBD_StdItfReq+0x18>
     USBD_CtlError(pdev , req);
 80025c2:	f7ff fe5a 	bl	800227a <USBD_CtlError>
    break;
 80025c6:	e7ef      	b.n	80025a8 <USBD_StdItfReq+0x18>

080025c8 <USBD_StdEPReq>:
{
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4605      	mov	r5, r0
 80025cc:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80025ce:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80025d0:	780b      	ldrb	r3, [r1, #0]
 80025d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d011      	beq.n	80025fe <USBD_StdEPReq+0x36>
 80025da:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 80025dc:	7863      	ldrb	r3, [r4, #1]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d02b      	beq.n	800263a <USBD_StdEPReq+0x72>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d04d      	beq.n	8002682 <USBD_StdEPReq+0xba>
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d10d      	bne.n	8002606 <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 80025ea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d00b      	beq.n	800260a <USBD_StdEPReq+0x42>
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d010      	beq.n	8002618 <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 80025f6:	4621      	mov	r1, r4
 80025f8:	f7ff fe3f 	bl	800227a <USBD_CtlError>
      break;    
 80025fc:	e003      	b.n	8002606 <USBD_StdEPReq+0x3e>
    pdev->pClass->Setup (pdev, req);
 80025fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4798      	blx	r3
}
 8002606:	2000      	movs	r0, #0
 8002608:	bd38      	pop	{r3, r4, r5, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800260a:	2900      	cmp	r1, #0
 800260c:	d0fb      	beq.n	8002606 <USBD_StdEPReq+0x3e>
 800260e:	2980      	cmp	r1, #128	; 0x80
 8002610:	d0f9      	beq.n	8002606 <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8002612:	f000 fc8a 	bl	8002f2a <USBD_LL_StallEP>
 8002616:	e7f6      	b.n	8002606 <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002618:	8863      	ldrh	r3, [r4, #2]
 800261a:	b923      	cbnz	r3, 8002626 <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800261c:	b119      	cbz	r1, 8002626 <USBD_StdEPReq+0x5e>
 800261e:	2980      	cmp	r1, #128	; 0x80
 8002620:	d001      	beq.n	8002626 <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8002622:	f000 fc82 	bl	8002f2a <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8002626:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4621      	mov	r1, r4
 800262e:	4628      	mov	r0, r5
 8002630:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002632:	4628      	mov	r0, r5
 8002634:	f000 f88e 	bl	8002754 <USBD_CtlSendStatus>
      break;
 8002638:	e7e5      	b.n	8002606 <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 800263a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800263e:	2b02      	cmp	r3, #2
 8002640:	d005      	beq.n	800264e <USBD_StdEPReq+0x86>
 8002642:	2b03      	cmp	r3, #3
 8002644:	d00a      	beq.n	800265c <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 8002646:	4621      	mov	r1, r4
 8002648:	f7ff fe17 	bl	800227a <USBD_CtlError>
      break;    
 800264c:	e7db      	b.n	8002606 <USBD_StdEPReq+0x3e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800264e:	2900      	cmp	r1, #0
 8002650:	d0d9      	beq.n	8002606 <USBD_StdEPReq+0x3e>
 8002652:	2980      	cmp	r1, #128	; 0x80
 8002654:	d0d7      	beq.n	8002606 <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8002656:	f000 fc68 	bl	8002f2a <USBD_LL_StallEP>
 800265a:	e7d4      	b.n	8002606 <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800265c:	8863      	ldrh	r3, [r4, #2]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1d1      	bne.n	8002606 <USBD_StdEPReq+0x3e>
        if ((ep_addr & 0x7F) != 0x00) 
 8002662:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8002666:	d103      	bne.n	8002670 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 8002668:	4628      	mov	r0, r5
 800266a:	f000 f873 	bl	8002754 <USBD_CtlSendStatus>
 800266e:	e7ca      	b.n	8002606 <USBD_StdEPReq+0x3e>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002670:	f000 fc69 	bl	8002f46 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8002674:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4621      	mov	r1, r4
 800267c:	4628      	mov	r0, r5
 800267e:	4798      	blx	r3
 8002680:	e7f2      	b.n	8002668 <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 8002682:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002686:	2b02      	cmp	r3, #2
 8002688:	d005      	beq.n	8002696 <USBD_StdEPReq+0xce>
 800268a:	2b03      	cmp	r3, #3
 800268c:	d009      	beq.n	80026a2 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 800268e:	4621      	mov	r1, r4
 8002690:	f7ff fdf3 	bl	800227a <USBD_CtlError>
      break;
 8002694:	e7b7      	b.n	8002606 <USBD_StdEPReq+0x3e>
      if ((ep_addr & 0x7F) != 0x00) 
 8002696:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800269a:	d0b4      	beq.n	8002606 <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 800269c:	f000 fc45 	bl	8002f2a <USBD_LL_StallEP>
 80026a0:	e7b1      	b.n	8002606 <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80026a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026a6:	d111      	bne.n	80026cc <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80026a8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80026ac:	3410      	adds	r4, #16
 80026ae:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80026b2:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80026b4:	4628      	mov	r0, r5
 80026b6:	f000 fc54 	bl	8002f62 <USBD_LL_IsStallEP>
 80026ba:	b170      	cbz	r0, 80026da <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 80026bc:	2301      	movs	r3, #1
 80026be:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 80026c0:	2202      	movs	r2, #2
 80026c2:	4621      	mov	r1, r4
 80026c4:	4628      	mov	r0, r5
 80026c6:	f000 f828 	bl	800271a <USBD_CtlSendData>
      break;
 80026ca:	e79c      	b.n	8002606 <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80026cc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80026d0:	3401      	adds	r4, #1
 80026d2:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80026d6:	3404      	adds	r4, #4
 80026d8:	e7ec      	b.n	80026b4 <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 80026da:	2300      	movs	r3, #0
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	e7ef      	b.n	80026c0 <USBD_StdEPReq+0xf8>

080026e0 <USBD_GetString>:
  if (desc != NULL) 
 80026e0:	b1d0      	cbz	r0, 8002718 <USBD_GetString+0x38>
{
 80026e2:	b570      	push	{r4, r5, r6, lr}
 80026e4:	460d      	mov	r5, r1
 80026e6:	4616      	mov	r6, r2
 80026e8:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80026ea:	f7ff fd98 	bl	800221e <USBD_GetLen>
 80026ee:	3001      	adds	r0, #1
 80026f0:	0040      	lsls	r0, r0, #1
 80026f2:	b280      	uxth	r0, r0
 80026f4:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 80026f6:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80026f8:	2303      	movs	r3, #3
 80026fa:	706b      	strb	r3, [r5, #1]
 80026fc:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80026fe:	e007      	b.n	8002710 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	3401      	adds	r4, #1
 8002706:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8002708:	3302      	adds	r3, #2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2100      	movs	r1, #0
 800270e:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8002710:	7821      	ldrb	r1, [r4, #0]
 8002712:	2900      	cmp	r1, #0
 8002714:	d1f4      	bne.n	8002700 <USBD_GetString+0x20>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	4770      	bx	lr

0800271a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800271a:	b510      	push	{r4, lr}
 800271c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800271e:	2202      	movs	r2, #2
 8002720:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002724:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8002726:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002728:	460a      	mov	r2, r1
 800272a:	2100      	movs	r1, #0
 800272c:	f000 fc3a 	bl	8002fa4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002730:	2000      	movs	r0, #0
 8002732:	bd10      	pop	{r4, pc}

08002734 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002734:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002736:	4613      	mov	r3, r2
 8002738:	460a      	mov	r2, r1
 800273a:	2100      	movs	r1, #0
 800273c:	f000 fc32 	bl	8002fa4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002740:	2000      	movs	r0, #0
 8002742:	bd08      	pop	{r3, pc}

08002744 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002744:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002746:	4613      	mov	r3, r2
 8002748:	460a      	mov	r2, r1
 800274a:	2100      	movs	r1, #0
 800274c:	f000 fc38 	bl	8002fc0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002750:	2000      	movs	r0, #0
 8002752:	bd08      	pop	{r3, pc}

08002754 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002754:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002756:	2304      	movs	r3, #4
 8002758:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800275c:	2300      	movs	r3, #0
 800275e:	461a      	mov	r2, r3
 8002760:	4619      	mov	r1, r3
 8002762:	f000 fc1f 	bl	8002fa4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002766:	2000      	movs	r0, #0
 8002768:	bd08      	pop	{r3, pc}

0800276a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800276a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800276c:	2305      	movs	r3, #5
 800276e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002772:	2300      	movs	r3, #0
 8002774:	461a      	mov	r2, r3
 8002776:	4619      	mov	r1, r3
 8002778:	f000 fc22 	bl	8002fc0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800277c:	2000      	movs	r0, #0
 800277e:	bd08      	pop	{r3, pc}

08002780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <MX_GPIO_Init+0x84>)
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	619a      	str	r2, [r3, #24]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	f002 0220 	and.w	r2, r2, #32
 8002794:	9201      	str	r2, [sp, #4]
 8002796:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	f042 0204 	orr.w	r2, r2, #4
 800279e:	619a      	str	r2, [r3, #24]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	f002 0204 	and.w	r2, r2, #4
 80027a6:	9202      	str	r2, [sp, #8]
 80027a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f042 0208 	orr.w	r2, r2, #8
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	9303      	str	r3, [sp, #12]
 80027ba:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, GPIO_PIN_RESET);
 80027bc:	4c12      	ldr	r4, [pc, #72]	; (8002808 <MX_GPIO_Init+0x88>)
 80027be:	2200      	movs	r2, #0
 80027c0:	2108      	movs	r1, #8
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fd fe83 	bl	80004ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_RESUME_Pin Button_SUSPEND_Pin Button_STEP_INTO_Pin Button_STEP_OVER_Pin 
                           Button_STEP_RETURN_Pin Button_RUN_TO_LINE_Pin Button_RESTART_Pin Button_TERMINATE_AND_RELAUNCH_Pin */
  GPIO_InitStruct.Pin = Button_RESUME_Pin|Button_SUSPEND_Pin|Button_STEP_INTO_Pin|Button_STEP_OVER_Pin 
 80027c8:	23ff      	movs	r3, #255	; 0xff
 80027ca:	9304      	str	r3, [sp, #16]
                          |Button_STEP_RETURN_Pin|Button_RUN_TO_LINE_Pin|Button_RESTART_Pin|Button_TERMINATE_AND_RELAUNCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027cc:	2600      	movs	r6, #0
 80027ce:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2501      	movs	r5, #1
 80027d2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	a904      	add	r1, sp, #16
 80027d6:	480d      	ldr	r0, [pc, #52]	; (800280c <MX_GPIO_Init+0x8c>)
 80027d8:	f7fd fd7c 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_TERMINATE_Pin Button_RUN_Pin Button_DEBUG_Pin Button_BUILD_Pin */
  GPIO_InitStruct.Pin = Button_TERMINATE_Pin|Button_RUN_Pin|Button_DEBUG_Pin|Button_BUILD_Pin;
 80027dc:	f640 4303 	movw	r3, #3075	; 0xc03
 80027e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	a904      	add	r1, sp, #16
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7fd fd73 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Enable_Pin */
  GPIO_InitStruct.Pin = USB_Enable_Pin;
 80027ee:	2308      	movs	r3, #8
 80027f0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(USB_Enable_GPIO_Port, &GPIO_InitStruct);
 80027f8:	a904      	add	r1, sp, #16
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7fd fd6a 	bl	80002d4 <HAL_GPIO_Init>

}
 8002800:	b008      	add	sp, #32
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40010c00 	.word	0x40010c00
 800280c:	40010800 	.word	0x40010800

08002810 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002810:	e7fe      	b.n	8002810 <_Error_Handler>
	...

08002814 <SystemClock_Config>:
{
 8002814:	b500      	push	{lr}
 8002816:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002818:	2201      	movs	r2, #1
 800281a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800281c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002820:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002822:	2100      	movs	r1, #0
 8002824:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002826:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002828:	2202      	movs	r2, #2
 800282a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800282c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800282e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002832:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002834:	a80a      	add	r0, sp, #40	; 0x28
 8002836:	f7fe fadf 	bl	8000df8 <HAL_RCC_OscConfig>
 800283a:	bb48      	cbnz	r0, 8002890 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800283c:	230f      	movs	r3, #15
 800283e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002840:	2102      	movs	r1, #2
 8002842:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002844:	2300      	movs	r3, #0
 8002846:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800284c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800284e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002850:	a805      	add	r0, sp, #20
 8002852:	f7fe fcf7 	bl	8001244 <HAL_RCC_ClockConfig>
 8002856:	bb00      	cbnz	r0, 800289a <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002858:	2310      	movs	r3, #16
 800285a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800285c:	2300      	movs	r3, #0
 800285e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002860:	a801      	add	r0, sp, #4
 8002862:	f7fe fdb1 	bl	80013c8 <HAL_RCCEx_PeriphCLKConfig>
 8002866:	b9e8      	cbnz	r0, 80028a4 <SystemClock_Config+0x90>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002868:	f7fe fda8 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <SystemClock_Config+0x9c>)
 800286e:	fba3 3000 	umull	r3, r0, r3, r0
 8002872:	0980      	lsrs	r0, r0, #6
 8002874:	f7fd fd02 	bl	800027c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002878:	2004      	movs	r0, #4
 800287a:	f7fd fd15 	bl	80002a8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	4611      	mov	r1, r2
 8002882:	f04f 30ff 	mov.w	r0, #4294967295
 8002886:	f7fd fcbb 	bl	8000200 <HAL_NVIC_SetPriority>
}
 800288a:	b015      	add	sp, #84	; 0x54
 800288c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002890:	f240 1133 	movw	r1, #307	; 0x133
 8002894:	4807      	ldr	r0, [pc, #28]	; (80028b4 <SystemClock_Config+0xa0>)
 8002896:	f7ff ffbb 	bl	8002810 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800289a:	f240 1141 	movw	r1, #321	; 0x141
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <SystemClock_Config+0xa0>)
 80028a0:	f7ff ffb6 	bl	8002810 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80028a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <SystemClock_Config+0xa0>)
 80028aa:	f7ff ffb1 	bl	8002810 <_Error_Handler>
 80028ae:	bf00      	nop
 80028b0:	10624dd3 	.word	0x10624dd3
 80028b4:	0800316c 	.word	0x0800316c

080028b8 <main>:
{
 80028b8:	b508      	push	{r3, lr}
  HAL_Init();
 80028ba:	f7fd fc5d 	bl	8000178 <HAL_Init>
  SystemClock_Config();
 80028be:	f7ff ffa9 	bl	8002814 <SystemClock_Config>
  MX_GPIO_Init();
 80028c2:	f7ff ff5d 	bl	8002780 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80028c6:	f000 fa4f 	bl	8002d68 <MX_USB_DEVICE_Init>
  keyboardHID.id = 1;
 80028ca:	4b88      	ldr	r3, [pc, #544]	; (8002aec <main+0x234>)
 80028cc:	2401      	movs	r4, #1
 80028ce:	701c      	strb	r4, [r3, #0]
  keyboardHID.modifiers = 0;
 80028d0:	2200      	movs	r2, #0
 80028d2:	705a      	strb	r2, [r3, #1]
  keyboardHID.key1 = 0;
 80028d4:	709a      	strb	r2, [r3, #2]
  keyboardHID.key2 = 0;
 80028d6:	70da      	strb	r2, [r3, #3]
  keyboardHID.key3 = 0;
 80028d8:	711a      	strb	r2, [r3, #4]
  HAL_Delay(800);
 80028da:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028de:	f7fd fc6b 	bl	80001b8 <HAL_Delay>
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, SET);
 80028e2:	4622      	mov	r2, r4
 80028e4:	2108      	movs	r1, #8
 80028e6:	4882      	ldr	r0, [pc, #520]	; (8002af0 <main+0x238>)
 80028e8:	f7fd fdf1 	bl	80004ce <HAL_GPIO_WritePin>
 80028ec:	e10e      	b.n	8002b0c <main+0x254>
			keyboardHID.key1 = KEY_F9;
 80028ee:	497f      	ldr	r1, [pc, #508]	; (8002aec <main+0x234>)
 80028f0:	2342      	movs	r3, #66	; 0x42
 80028f2:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80028f4:	2205      	movs	r2, #5
 80028f6:	487f      	ldr	r0, [pc, #508]	; (8002af4 <main+0x23c>)
 80028f8:	f7ff fb4c 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 80028fc:	2014      	movs	r0, #20
 80028fe:	f7fd fc5b 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_SUSPEND_GPIO_Port, Button_SUSPEND_Pin));
 8002902:	2102      	movs	r1, #2
 8002904:	487c      	ldr	r0, [pc, #496]	; (8002af8 <main+0x240>)
 8002906:	f7fd fddb 	bl	80004c0 <HAL_GPIO_ReadPin>
 800290a:	2800      	cmp	r0, #0
 800290c:	d0f9      	beq.n	8002902 <main+0x4a>
			keyboardHID.key1 = 0;
 800290e:	4977      	ldr	r1, [pc, #476]	; (8002aec <main+0x234>)
 8002910:	2300      	movs	r3, #0
 8002912:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002914:	2205      	movs	r2, #5
 8002916:	4877      	ldr	r0, [pc, #476]	; (8002af4 <main+0x23c>)
 8002918:	f7ff fb3c 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 800291c:	2014      	movs	r0, #20
 800291e:	f7fd fc4b 	bl	80001b8 <HAL_Delay>
 8002922:	e119      	b.n	8002b58 <main+0x2a0>
			keyboardHID.key1 = KEY_F5;
 8002924:	4971      	ldr	r1, [pc, #452]	; (8002aec <main+0x234>)
 8002926:	233e      	movs	r3, #62	; 0x3e
 8002928:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 800292a:	2205      	movs	r2, #5
 800292c:	4871      	ldr	r0, [pc, #452]	; (8002af4 <main+0x23c>)
 800292e:	f7ff fb31 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002932:	2014      	movs	r0, #20
 8002934:	f7fd fc40 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_STEP_INTO_GPIO_Port, Button_STEP_INTO_Pin));
 8002938:	2104      	movs	r1, #4
 800293a:	486f      	ldr	r0, [pc, #444]	; (8002af8 <main+0x240>)
 800293c:	f7fd fdc0 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002940:	2800      	cmp	r0, #0
 8002942:	d0f9      	beq.n	8002938 <main+0x80>
			keyboardHID.key1 = 0;
 8002944:	4969      	ldr	r1, [pc, #420]	; (8002aec <main+0x234>)
 8002946:	2300      	movs	r3, #0
 8002948:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 800294a:	2205      	movs	r2, #5
 800294c:	4869      	ldr	r0, [pc, #420]	; (8002af4 <main+0x23c>)
 800294e:	f7ff fb21 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002952:	2014      	movs	r0, #20
 8002954:	f7fd fc30 	bl	80001b8 <HAL_Delay>
 8002958:	e105      	b.n	8002b66 <main+0x2ae>
			keyboardHID.key1 = KEY_F6;
 800295a:	4964      	ldr	r1, [pc, #400]	; (8002aec <main+0x234>)
 800295c:	233f      	movs	r3, #63	; 0x3f
 800295e:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002960:	2205      	movs	r2, #5
 8002962:	4864      	ldr	r0, [pc, #400]	; (8002af4 <main+0x23c>)
 8002964:	f7ff fb16 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002968:	2014      	movs	r0, #20
 800296a:	f7fd fc25 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_STEP_OVER_GPIO_Port, Button_STEP_OVER_Pin));
 800296e:	2108      	movs	r1, #8
 8002970:	4861      	ldr	r0, [pc, #388]	; (8002af8 <main+0x240>)
 8002972:	f7fd fda5 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002976:	2800      	cmp	r0, #0
 8002978:	d0f9      	beq.n	800296e <main+0xb6>
			keyboardHID.key1 = 0;
 800297a:	495c      	ldr	r1, [pc, #368]	; (8002aec <main+0x234>)
 800297c:	2300      	movs	r3, #0
 800297e:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002980:	2205      	movs	r2, #5
 8002982:	485c      	ldr	r0, [pc, #368]	; (8002af4 <main+0x23c>)
 8002984:	f7ff fb06 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002988:	2014      	movs	r0, #20
 800298a:	f7fd fc15 	bl	80001b8 <HAL_Delay>
 800298e:	e0f1      	b.n	8002b74 <main+0x2bc>
			keyboardHID.key1 = KEY_F7;
 8002990:	4956      	ldr	r1, [pc, #344]	; (8002aec <main+0x234>)
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002996:	2205      	movs	r2, #5
 8002998:	4856      	ldr	r0, [pc, #344]	; (8002af4 <main+0x23c>)
 800299a:	f7ff fafb 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 800299e:	2014      	movs	r0, #20
 80029a0:	f7fd fc0a 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_STEP_RETURN_GPIO_Port, Button_STEP_RETURN_Pin));
 80029a4:	2110      	movs	r1, #16
 80029a6:	4854      	ldr	r0, [pc, #336]	; (8002af8 <main+0x240>)
 80029a8:	f7fd fd8a 	bl	80004c0 <HAL_GPIO_ReadPin>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d0f9      	beq.n	80029a4 <main+0xec>
			keyboardHID.key1 = 0;
 80029b0:	494e      	ldr	r1, [pc, #312]	; (8002aec <main+0x234>)
 80029b2:	2300      	movs	r3, #0
 80029b4:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80029b6:	2205      	movs	r2, #5
 80029b8:	484e      	ldr	r0, [pc, #312]	; (8002af4 <main+0x23c>)
 80029ba:	f7ff faeb 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 80029be:	2014      	movs	r0, #20
 80029c0:	f7fd fbfa 	bl	80001b8 <HAL_Delay>
 80029c4:	e0dd      	b.n	8002b82 <main+0x2ca>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 80029c6:	4949      	ldr	r1, [pc, #292]	; (8002aec <main+0x234>)
 80029c8:	2301      	movs	r3, #1
 80029ca:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_R;
 80029cc:	2315      	movs	r3, #21
 80029ce:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80029d0:	2205      	movs	r2, #5
 80029d2:	4848      	ldr	r0, [pc, #288]	; (8002af4 <main+0x23c>)
 80029d4:	f7ff fade 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 80029d8:	2014      	movs	r0, #20
 80029da:	f7fd fbed 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RUN_TO_LINE_GPIO_Port, Button_RUN_TO_LINE_Pin));
 80029de:	2120      	movs	r1, #32
 80029e0:	4845      	ldr	r0, [pc, #276]	; (8002af8 <main+0x240>)
 80029e2:	f7fd fd6d 	bl	80004c0 <HAL_GPIO_ReadPin>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d0f9      	beq.n	80029de <main+0x126>
			keyboardHID.modifiers = 0;
 80029ea:	4940      	ldr	r1, [pc, #256]	; (8002aec <main+0x234>)
 80029ec:	2300      	movs	r3, #0
 80029ee:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 80029f0:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80029f2:	2205      	movs	r2, #5
 80029f4:	483f      	ldr	r0, [pc, #252]	; (8002af4 <main+0x23c>)
 80029f6:	f7ff facd 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 80029fa:	2014      	movs	r0, #20
 80029fc:	f7fd fbdc 	bl	80001b8 <HAL_Delay>
 8002a00:	e0c6      	b.n	8002b90 <main+0x2d8>
			keyboardHID.key1 = KEY_F10;
 8002a02:	493a      	ldr	r1, [pc, #232]	; (8002aec <main+0x234>)
 8002a04:	2343      	movs	r3, #67	; 0x43
 8002a06:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a08:	2205      	movs	r2, #5
 8002a0a:	483a      	ldr	r0, [pc, #232]	; (8002af4 <main+0x23c>)
 8002a0c:	f7ff fac2 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a10:	2014      	movs	r0, #20
 8002a12:	f7fd fbd1 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RESTART_GPIO_Port, Button_RESTART_Pin));
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	4837      	ldr	r0, [pc, #220]	; (8002af8 <main+0x240>)
 8002a1a:	f7fd fd51 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d0f9      	beq.n	8002a16 <main+0x15e>
			keyboardHID.key1 = 0;
 8002a22:	4932      	ldr	r1, [pc, #200]	; (8002aec <main+0x234>)
 8002a24:	2300      	movs	r3, #0
 8002a26:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a28:	2205      	movs	r2, #5
 8002a2a:	4832      	ldr	r0, [pc, #200]	; (8002af4 <main+0x23c>)
 8002a2c:	f7ff fab2 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a30:	2014      	movs	r0, #20
 8002a32:	f7fd fbc1 	bl	80001b8 <HAL_Delay>
 8002a36:	e0b2      	b.n	8002b9e <main+0x2e6>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002a38:	492c      	ldr	r1, [pc, #176]	; (8002aec <main+0x234>)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_F8;
 8002a3e:	2341      	movs	r3, #65	; 0x41
 8002a40:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a42:	2205      	movs	r2, #5
 8002a44:	482b      	ldr	r0, [pc, #172]	; (8002af4 <main+0x23c>)
 8002a46:	f7ff faa5 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a4a:	2014      	movs	r0, #20
 8002a4c:	f7fd fbb4 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_TERMINATE_AND_RELAUNCH_GPIO_Port, Button_TERMINATE_AND_RELAUNCH_Pin));
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	4829      	ldr	r0, [pc, #164]	; (8002af8 <main+0x240>)
 8002a54:	f7fd fd34 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d0f9      	beq.n	8002a50 <main+0x198>
			keyboardHID.modifiers = 0;
 8002a5c:	4923      	ldr	r1, [pc, #140]	; (8002aec <main+0x234>)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002a62:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a64:	2205      	movs	r2, #5
 8002a66:	4823      	ldr	r0, [pc, #140]	; (8002af4 <main+0x23c>)
 8002a68:	f7ff fa94 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a6c:	2014      	movs	r0, #20
 8002a6e:	f7fd fba3 	bl	80001b8 <HAL_Delay>
 8002a72:	e09b      	b.n	8002bac <main+0x2f4>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002a74:	491d      	ldr	r1, [pc, #116]	; (8002aec <main+0x234>)
 8002a76:	2301      	movs	r3, #1
 8002a78:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_F2;
 8002a7a:	233b      	movs	r3, #59	; 0x3b
 8002a7c:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a7e:	2205      	movs	r2, #5
 8002a80:	481c      	ldr	r0, [pc, #112]	; (8002af4 <main+0x23c>)
 8002a82:	f7ff fa87 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a86:	2014      	movs	r0, #20
 8002a88:	f7fd fb96 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_TERMINATE_GPIO_Port, Button_TERMINATE_Pin));
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4818      	ldr	r0, [pc, #96]	; (8002af0 <main+0x238>)
 8002a90:	f7fd fd16 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0f9      	beq.n	8002a8c <main+0x1d4>
			keyboardHID.modifiers = 0;
 8002a98:	4914      	ldr	r1, [pc, #80]	; (8002aec <main+0x234>)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002a9e:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	4814      	ldr	r0, [pc, #80]	; (8002af4 <main+0x23c>)
 8002aa4:	f7ff fa76 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002aa8:	2014      	movs	r0, #20
 8002aaa:	f7fd fb85 	bl	80001b8 <HAL_Delay>
 8002aae:	e084      	b.n	8002bba <main+0x302>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <main+0x234>)
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_F11;
 8002ab6:	2344      	movs	r3, #68	; 0x44
 8002ab8:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002aba:	2205      	movs	r2, #5
 8002abc:	480d      	ldr	r0, [pc, #52]	; (8002af4 <main+0x23c>)
 8002abe:	f7ff fa69 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002ac2:	2014      	movs	r0, #20
 8002ac4:	f7fd fb78 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RUN_GPIO_Port, Button_RUN_Pin));
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4809      	ldr	r0, [pc, #36]	; (8002af0 <main+0x238>)
 8002acc:	f7fd fcf8 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d0f9      	beq.n	8002ac8 <main+0x210>
			keyboardHID.modifiers = 0;
 8002ad4:	4905      	ldr	r1, [pc, #20]	; (8002aec <main+0x234>)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002ada:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002adc:	2205      	movs	r2, #5
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <main+0x23c>)
 8002ae0:	f7ff fa58 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002ae4:	2014      	movs	r0, #20
 8002ae6:	f7fd fb67 	bl	80001b8 <HAL_Delay>
 8002aea:	e06d      	b.n	8002bc8 <main+0x310>
 8002aec:	20000134 	.word	0x20000134
 8002af0:	40010c00 	.word	0x40010c00
 8002af4:	2000013c 	.word	0x2000013c
 8002af8:	40010800 	.word	0x40010800
	  if(!HAL_GPIO_ReadPin(Button_BUILD_GPIO_Port, Button_BUILD_Pin))
 8002afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b00:	4852      	ldr	r0, [pc, #328]	; (8002c4c <main+0x394>)
 8002b02:	f7fd fcdd 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f000 8081 	beq.w	8002c0e <main+0x356>
	  if(!HAL_GPIO_ReadPin(Button_RESUME_GPIO_Port, Button_RESUME_Pin))
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4850      	ldr	r0, [pc, #320]	; (8002c50 <main+0x398>)
 8002b10:	f7fd fcd6 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b14:	b9c8      	cbnz	r0, 8002b4a <main+0x292>
			keyboardHID.key1 = KEY_F8;
 8002b16:	494f      	ldr	r1, [pc, #316]	; (8002c54 <main+0x39c>)
 8002b18:	2341      	movs	r3, #65	; 0x41
 8002b1a:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	484e      	ldr	r0, [pc, #312]	; (8002c58 <main+0x3a0>)
 8002b20:	f7ff fa38 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002b24:	2014      	movs	r0, #20
 8002b26:	f7fd fb47 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RESUME_GPIO_Port, Button_RESUME_Pin));
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4848      	ldr	r0, [pc, #288]	; (8002c50 <main+0x398>)
 8002b2e:	f7fd fcc7 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d0f9      	beq.n	8002b2a <main+0x272>
			keyboardHID.key1 = 0;
 8002b36:	4947      	ldr	r1, [pc, #284]	; (8002c54 <main+0x39c>)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	4846      	ldr	r0, [pc, #280]	; (8002c58 <main+0x3a0>)
 8002b40:	f7ff fa28 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002b44:	2014      	movs	r0, #20
 8002b46:	f7fd fb37 	bl	80001b8 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(Button_SUSPEND_GPIO_Port, Button_SUSPEND_Pin))
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4840      	ldr	r0, [pc, #256]	; (8002c50 <main+0x398>)
 8002b4e:	f7fd fcb7 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	f43f aecb 	beq.w	80028ee <main+0x36>
	  if(!HAL_GPIO_ReadPin(Button_STEP_INTO_GPIO_Port, Button_STEP_INTO_Pin))
 8002b58:	2104      	movs	r1, #4
 8002b5a:	483d      	ldr	r0, [pc, #244]	; (8002c50 <main+0x398>)
 8002b5c:	f7fd fcb0 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	f43f aedf 	beq.w	8002924 <main+0x6c>
	  if(!HAL_GPIO_ReadPin(Button_STEP_OVER_GPIO_Port, Button_STEP_OVER_Pin))
 8002b66:	2108      	movs	r1, #8
 8002b68:	4839      	ldr	r0, [pc, #228]	; (8002c50 <main+0x398>)
 8002b6a:	f7fd fca9 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	f43f aef3 	beq.w	800295a <main+0xa2>
	  if(!HAL_GPIO_ReadPin(Button_STEP_RETURN_GPIO_Port, Button_STEP_RETURN_Pin))
 8002b74:	2110      	movs	r1, #16
 8002b76:	4836      	ldr	r0, [pc, #216]	; (8002c50 <main+0x398>)
 8002b78:	f7fd fca2 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	f43f af07 	beq.w	8002990 <main+0xd8>
	  if(!HAL_GPIO_ReadPin(Button_RUN_TO_LINE_GPIO_Port, Button_RUN_TO_LINE_Pin))
 8002b82:	2120      	movs	r1, #32
 8002b84:	4832      	ldr	r0, [pc, #200]	; (8002c50 <main+0x398>)
 8002b86:	f7fd fc9b 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	f43f af1b 	beq.w	80029c6 <main+0x10e>
	  if(!HAL_GPIO_ReadPin(Button_RESTART_GPIO_Port, Button_RESTART_Pin))
 8002b90:	2140      	movs	r1, #64	; 0x40
 8002b92:	482f      	ldr	r0, [pc, #188]	; (8002c50 <main+0x398>)
 8002b94:	f7fd fc94 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	f43f af32 	beq.w	8002a02 <main+0x14a>
	  if(!HAL_GPIO_ReadPin(Button_TERMINATE_AND_RELAUNCH_GPIO_Port, Button_TERMINATE_AND_RELAUNCH_Pin))
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	482b      	ldr	r0, [pc, #172]	; (8002c50 <main+0x398>)
 8002ba2:	f7fd fc8d 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	f43f af46 	beq.w	8002a38 <main+0x180>
	  if(!HAL_GPIO_ReadPin(Button_TERMINATE_GPIO_Port, Button_TERMINATE_Pin))
 8002bac:	2101      	movs	r1, #1
 8002bae:	4827      	ldr	r0, [pc, #156]	; (8002c4c <main+0x394>)
 8002bb0:	f7fd fc86 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	f43f af5d 	beq.w	8002a74 <main+0x1bc>
	  if(!HAL_GPIO_ReadPin(Button_RUN_GPIO_Port, Button_RUN_Pin))
 8002bba:	2102      	movs	r1, #2
 8002bbc:	4823      	ldr	r0, [pc, #140]	; (8002c4c <main+0x394>)
 8002bbe:	f7fd fc7f 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	f43f af74 	beq.w	8002ab0 <main+0x1f8>
	  if(!HAL_GPIO_ReadPin(Button_DEBUG_GPIO_Port, Button_DEBUG_Pin))
 8002bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bcc:	481f      	ldr	r0, [pc, #124]	; (8002c4c <main+0x394>)
 8002bce:	f7fd fc77 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d192      	bne.n	8002afc <main+0x244>
			keyboardHID.key1 = KEY_F11;
 8002bd6:	491f      	ldr	r1, [pc, #124]	; (8002c54 <main+0x39c>)
 8002bd8:	2344      	movs	r3, #68	; 0x44
 8002bda:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002bdc:	2205      	movs	r2, #5
 8002bde:	481e      	ldr	r0, [pc, #120]	; (8002c58 <main+0x3a0>)
 8002be0:	f7ff f9d8 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002be4:	2014      	movs	r0, #20
 8002be6:	f7fd fae7 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_DEBUG_GPIO_Port, Button_DEBUG_Pin));
 8002bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bee:	4817      	ldr	r0, [pc, #92]	; (8002c4c <main+0x394>)
 8002bf0:	f7fd fc66 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d0f8      	beq.n	8002bea <main+0x332>
			keyboardHID.key1 = 0;
 8002bf8:	4916      	ldr	r1, [pc, #88]	; (8002c54 <main+0x39c>)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002bfe:	2205      	movs	r2, #5
 8002c00:	4815      	ldr	r0, [pc, #84]	; (8002c58 <main+0x3a0>)
 8002c02:	f7ff f9c7 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c06:	2014      	movs	r0, #20
 8002c08:	f7fd fad6 	bl	80001b8 <HAL_Delay>
 8002c0c:	e776      	b.n	8002afc <main+0x244>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002c0e:	4911      	ldr	r1, [pc, #68]	; (8002c54 <main+0x39c>)
 8002c10:	2301      	movs	r3, #1
 8002c12:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_B;
 8002c14:	2205      	movs	r2, #5
 8002c16:	708a      	strb	r2, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002c18:	480f      	ldr	r0, [pc, #60]	; (8002c58 <main+0x3a0>)
 8002c1a:	f7ff f9bb 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c1e:	2014      	movs	r0, #20
 8002c20:	f7fd faca 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_BUILD_GPIO_Port, Button_BUILD_Pin));
 8002c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <main+0x394>)
 8002c2a:	f7fd fc49 	bl	80004c0 <HAL_GPIO_ReadPin>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d0f8      	beq.n	8002c24 <main+0x36c>
			keyboardHID.modifiers = 0;
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <main+0x39c>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002c38:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	4806      	ldr	r0, [pc, #24]	; (8002c58 <main+0x3a0>)
 8002c3e:	f7ff f9a9 	bl	8001f94 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c42:	2014      	movs	r0, #20
 8002c44:	f7fd fab8 	bl	80001b8 <HAL_Delay>
 8002c48:	e760      	b.n	8002b0c <main+0x254>
 8002c4a:	bf00      	nop
 8002c4c:	40010c00 	.word	0x40010c00
 8002c50:	40010800 	.word	0x40010800
 8002c54:	20000134 	.word	0x20000134
 8002c58:	2000013c 	.word	0x2000013c

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b500      	push	{lr}
 8002c5e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_MspInit+0x8c>)
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	619a      	str	r2, [r3, #24]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f7fd fab1 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	f06f 000b 	mvn.w	r0, #11
 8002c82:	f7fd fabd 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f06f 000a 	mvn.w	r0, #10
 8002c8e:	f7fd fab7 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	4611      	mov	r1, r2
 8002c96:	f06f 0009 	mvn.w	r0, #9
 8002c9a:	f7fd fab1 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	f06f 0004 	mvn.w	r0, #4
 8002ca6:	f7fd faab 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	4611      	mov	r1, r2
 8002cae:	f06f 0003 	mvn.w	r0, #3
 8002cb2:	f7fd faa5 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4611      	mov	r1, r2
 8002cba:	f06f 0001 	mvn.w	r0, #1
 8002cbe:	f7fd fa9f 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cca:	f7fd fa99 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_MspInit+0x90>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce0:	b003      	add	sp, #12
 8002ce2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000

08002cf0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002cf0:	4770      	bx	lr

08002cf2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler>

08002cf4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler>

08002cf6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler>

08002cf8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler>

08002cfa <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002cfa:	4770      	bx	lr

08002cfc <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002cfc:	4770      	bx	lr

08002cfe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002cfe:	4770      	bx	lr

08002d00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d02:	f7fd fa4b 	bl	800019c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002d06:	f7fd fae0 	bl	80002ca <HAL_SYSTICK_IRQHandler>
 8002d0a:	bd08      	pop	{r3, pc}

08002d0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d0e:	4802      	ldr	r0, [pc, #8]	; (8002d18 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8002d10:	f7fd ff3d 	bl	8000b8e <HAL_PCD_IRQHandler>
 8002d14:	bd08      	pop	{r3, pc}
 8002d16:	bf00      	nop
 8002d18:	20000360 	.word	0x20000360

08002d1c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <SystemInit+0x40>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <SystemInit+0x44>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d38:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d40:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d48:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d4a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d4e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <SystemInit+0x48>)
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	f8ff0000 	.word	0xf8ff0000
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8002d68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002d6a:	4c07      	ldr	r4, [pc, #28]	; (8002d88 <MX_USB_DEVICE_Init+0x20>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4907      	ldr	r1, [pc, #28]	; (8002d8c <MX_USB_DEVICE_Init+0x24>)
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff f923 	bl	8001fbc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8002d76:	4906      	ldr	r1, [pc, #24]	; (8002d90 <MX_USB_DEVICE_Init+0x28>)
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff f936 	bl	8001fea <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff f93a 	bl	8001ff8 <USBD_Start>
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	2000013c 	.word	0x2000013c
 8002d8c:	200000c8 	.word	0x200000c8
 8002d90:	20000050 	.word	0x20000050

08002d94 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8002d94:	6802      	ldr	r2, [r0, #0]
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_PCD_MspInit+0x3c>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d000      	beq.n	8002d9e <HAL_PCD_MspInit+0xa>
 8002d9c:	4770      	bx	lr
{
 8002d9e:	b500      	push	{lr}
 8002da0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002da2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	4611      	mov	r1, r2
 8002dbc:	2014      	movs	r0, #20
 8002dbe:	f7fd fa1f 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002dc2:	2014      	movs	r0, #20
 8002dc4:	f7fd fa4e 	bl	8000264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002dc8:	b003      	add	sp, #12
 8002dca:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dce:	bf00      	nop
 8002dd0:	40005c00 	.word	0x40005c00

08002dd4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002dd4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002dd6:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002dda:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dde:	f7ff f924 	bl	800202a <USBD_LL_SetupStage>
 8002de2:	bd08      	pop	{r3, pc}

08002de4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002de4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002de6:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002dea:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002dee:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002df2:	f7ff f947 	bl	8002084 <USBD_LL_DataOutStage>
 8002df6:	bd08      	pop	{r3, pc}

08002df8 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002df8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002dfa:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e04:	f7ff f973 	bl	80020ee <USBD_LL_DataInStage>
 8002e08:	bd08      	pop	{r3, pc}

08002e0a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002e0a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002e0c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e10:	f7ff f9f7 	bl	8002202 <USBD_LL_SOF>
 8002e14:	bd08      	pop	{r3, pc}

08002e16 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002e16:	b510      	push	{r4, lr}
 8002e18:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e20:	f7ff f9dd 	bl	80021de <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e24:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8002e28:	f7ff f9ba 	bl	80021a0 <USBD_LL_Reset>
 8002e2c:	bd10      	pop	{r4, pc}
	...

08002e30 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002e34:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e38:	f7ff f9d4 	bl	80021e4 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8002e3c:	69a3      	ldr	r3, [r4, #24]
 8002e3e:	b123      	cbz	r3, 8002e4a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002e40:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <HAL_PCD_SuspendCallback+0x1c>)
 8002e42:	6913      	ldr	r3, [r2, #16]
 8002e44:	f043 0306 	orr.w	r3, r3, #6
 8002e48:	6113      	str	r3, [r2, #16]
 8002e4a:	bd10      	pop	{r4, pc}
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e52:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e56:	f7ff f9ce 	bl	80021f6 <USBD_LL_Resume>
 8002e5a:	bd08      	pop	{r3, pc}

08002e5c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	4604      	mov	r4, r0
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8002e60:	4818      	ldr	r0, [pc, #96]	; (8002ec4 <USBD_LL_Init+0x68>)
 8002e62:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002e66:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <USBD_LL_Init+0x6c>)
 8002e6c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002e6e:	2308      	movs	r3, #8
 8002e70:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e72:	2302      	movs	r3, #2
 8002e74:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002e76:	2303      	movs	r3, #3
 8002e78:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e7e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e80:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e82:	f7fd fb2a 	bl	80004da <HAL_PCD_Init>
 8002e86:	b9b8      	cbnz	r0, 8002eb8 <USBD_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002e88:	2318      	movs	r3, #24
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e92:	f7fd ff83 	bl	8000d9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002e96:	2358      	movs	r3, #88	; 0x58
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002ea0:	f7fd ff7c 	bl	8000d9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 8002ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2181      	movs	r1, #129	; 0x81
 8002eac:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002eb0:	f7fd ff74 	bl	8000d9c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002eb8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <USBD_LL_Init+0x70>)
 8002ebe:	f7ff fca7 	bl	8002810 <_Error_Handler>
 8002ec2:	e7e1      	b.n	8002e88 <USBD_LL_Init+0x2c>
 8002ec4:	20000360 	.word	0x20000360
 8002ec8:	40005c00 	.word	0x40005c00
 8002ecc:	0800318c 	.word	0x0800318c

08002ed0 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002ed0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002ed2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ed6:	f7fd fb6b 	bl	80005b0 <HAL_PCD_Start>
     
  switch (hal_status) {
 8002eda:	b118      	cbz	r0, 8002ee4 <USBD_LL_Start+0x14>
 8002edc:	2802      	cmp	r0, #2
 8002ede:	d003      	beq.n	8002ee8 <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002ee0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ee2:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002ee8:	2001      	movs	r0, #1
    break;
 8002eea:	bd08      	pop	{r3, pc}

08002eec <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8002eec:	b510      	push	{r4, lr}
 8002eee:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ef8:	f7fd fb85 	bl	8000606 <HAL_PCD_EP_Open>
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8002efc:	b118      	cbz	r0, 8002f06 <USBD_LL_OpenEP+0x1a>
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d003      	beq.n	8002f0a <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f02:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f04:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8002f06:	2000      	movs	r0, #0
 8002f08:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 8002f0a:	2001      	movs	r0, #1
    break;
 8002f0c:	bd10      	pop	{r4, pc}

08002f0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002f0e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002f10:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f14:	f7fd fba0 	bl	8000658 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8002f18:	b118      	cbz	r0, 8002f22 <USBD_LL_CloseEP+0x14>
 8002f1a:	2802      	cmp	r0, #2
 8002f1c:	d003      	beq.n	8002f26 <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f1e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f20:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f22:	2000      	movs	r0, #0
 8002f24:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002f26:	2001      	movs	r0, #1
    break;
 8002f28:	bd08      	pop	{r3, pc}

08002f2a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002f2a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002f2c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f30:	f7fd fedf 	bl	8000cf2 <HAL_PCD_EP_SetStall>
      
  switch (hal_status) {
 8002f34:	b118      	cbz	r0, 8002f3e <USBD_LL_StallEP+0x14>
 8002f36:	2802      	cmp	r0, #2
 8002f38:	d003      	beq.n	8002f42 <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f3a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f3c:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f3e:	2000      	movs	r0, #0
 8002f40:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002f42:	2001      	movs	r0, #1
    break;
 8002f44:	bd08      	pop	{r3, pc}

08002f46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002f46:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f48:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f4c:	f7fd feff 	bl	8000d4e <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8002f50:	b118      	cbz	r0, 8002f5a <USBD_LL_ClearStallEP+0x14>
 8002f52:	2802      	cmp	r0, #2
 8002f54:	d003      	beq.n	8002f5e <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f56:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f58:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002f5e:	2001      	movs	r0, #1
    break;
 8002f60:	bd08      	pop	{r3, pc}

08002f62 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f62:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8002f66:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f6a:	d106      	bne.n	8002f7a <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f6c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002f70:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8002f74:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
  }
}
 8002f78:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f7a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002f7e:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 8002f82:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8002f86:	4770      	bx	lr

08002f88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8002f88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002f8a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f8e:	f7fd fb26 	bl	80005de <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8002f92:	b118      	cbz	r0, 8002f9c <USBD_LL_SetUSBAddress+0x14>
 8002f94:	2802      	cmp	r0, #2
 8002f96:	d003      	beq.n	8002fa0 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f98:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f9a:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002fa0:	2001      	movs	r0, #1
    break;
 8002fa2:	bd08      	pop	{r3, pc}

08002fa4 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8002fa4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002fa6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002faa:	f7fd fb9b 	bl	80006e4 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8002fae:	b118      	cbz	r0, 8002fb8 <USBD_LL_Transmit+0x14>
 8002fb0:	2802      	cmp	r0, #2
 8002fb2:	d003      	beq.n	8002fbc <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002fb4:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002fb6:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002fb8:	2000      	movs	r0, #0
 8002fba:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002fbc:	2001      	movs	r0, #1
    break;
 8002fbe:	bd08      	pop	{r3, pc}

08002fc0 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8002fc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002fc2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fc6:	f7fd fb6e 	bl	80006a6 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8002fca:	b118      	cbz	r0, 8002fd4 <USBD_LL_PrepareReceive+0x14>
 8002fcc:	2802      	cmp	r0, #2
 8002fce:	d003      	beq.n	8002fd8 <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002fd0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002fd2:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8002fd8:	2001      	movs	r0, #1
    break;
 8002fda:	bd08      	pop	{r3, pc}

08002fdc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002fdc:	4800      	ldr	r0, [pc, #0]	; (8002fe0 <USBD_static_malloc+0x4>)
 8002fde:	4770      	bx	lr
 8002fe0:	2000011c 	.word	0x2000011c

08002fe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002fe6:	4770      	bx	lr

08002fe8 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fe8:	2312      	movs	r3, #18
 8002fea:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8002fec:	4800      	ldr	r0, [pc, #0]	; (8002ff0 <USBD_FS_DeviceDescriptor+0x8>)
 8002fee:	4770      	bx	lr
 8002ff0:	200000e4 	.word	0x200000e4

08002ff4 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002ff8:	4800      	ldr	r0, [pc, #0]	; (8002ffc <USBD_FS_LangIDStrDescriptor+0x8>)
 8002ffa:	4770      	bx	lr
 8002ffc:	200000f8 	.word	0x200000f8

08003000 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003000:	b508      	push	{r3, lr}
 8003002:	460a      	mov	r2, r1
  if(speed == 0)
 8003004:	b128      	cbz	r0, 8003012 <USBD_FS_ProductStrDescriptor+0x12>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8003006:	4905      	ldr	r1, [pc, #20]	; (800301c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003008:	4805      	ldr	r0, [pc, #20]	; (8003020 <USBD_FS_ProductStrDescriptor+0x20>)
 800300a:	f7ff fb69 	bl	80026e0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 800300e:	4803      	ldr	r0, [pc, #12]	; (800301c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003010:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003012:	4902      	ldr	r1, [pc, #8]	; (800301c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <USBD_FS_ProductStrDescriptor+0x20>)
 8003016:	f7ff fb63 	bl	80026e0 <USBD_GetString>
 800301a:	e7f8      	b.n	800300e <USBD_FS_ProductStrDescriptor+0xe>
 800301c:	200007c0 	.word	0x200007c0
 8003020:	080031d0 	.word	0x080031d0

08003024 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003024:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003026:	4c04      	ldr	r4, [pc, #16]	; (8003038 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003028:	460a      	mov	r2, r1
 800302a:	4621      	mov	r1, r4
 800302c:	4803      	ldr	r0, [pc, #12]	; (800303c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800302e:	f7ff fb57 	bl	80026e0 <USBD_GetString>
  return USBD_StrDesc;
}
 8003032:	4620      	mov	r0, r4
 8003034:	bd10      	pop	{r4, pc}
 8003036:	bf00      	nop
 8003038:	200007c0 	.word	0x200007c0
 800303c:	080031bc 	.word	0x080031bc

08003040 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003040:	b508      	push	{r3, lr}
 8003042:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 8003044:	b128      	cbz	r0, 8003052 <USBD_FS_SerialStrDescriptor+0x12>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8003046:	4905      	ldr	r1, [pc, #20]	; (800305c <USBD_FS_SerialStrDescriptor+0x1c>)
 8003048:	4805      	ldr	r0, [pc, #20]	; (8003060 <USBD_FS_SerialStrDescriptor+0x20>)
 800304a:	f7ff fb49 	bl	80026e0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 800304e:	4803      	ldr	r0, [pc, #12]	; (800305c <USBD_FS_SerialStrDescriptor+0x1c>)
 8003050:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003052:	4902      	ldr	r1, [pc, #8]	; (800305c <USBD_FS_SerialStrDescriptor+0x1c>)
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <USBD_FS_SerialStrDescriptor+0x20>)
 8003056:	f7ff fb43 	bl	80026e0 <USBD_GetString>
 800305a:	e7f8      	b.n	800304e <USBD_FS_SerialStrDescriptor+0xe>
 800305c:	200007c0 	.word	0x200007c0
 8003060:	080031e8 	.word	0x080031e8

08003064 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003064:	b508      	push	{r3, lr}
 8003066:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 8003068:	b128      	cbz	r0, 8003076 <USBD_FS_ConfigStrDescriptor+0x12>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 800306a:	4905      	ldr	r1, [pc, #20]	; (8003080 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800306c:	4805      	ldr	r0, [pc, #20]	; (8003084 <USBD_FS_ConfigStrDescriptor+0x20>)
 800306e:	f7ff fb37 	bl	80026e0 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8003072:	4803      	ldr	r0, [pc, #12]	; (8003080 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003074:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003076:	4902      	ldr	r1, [pc, #8]	; (8003080 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <USBD_FS_ConfigStrDescriptor+0x20>)
 800307a:	f7ff fb31 	bl	80026e0 <USBD_GetString>
 800307e:	e7f8      	b.n	8003072 <USBD_FS_ConfigStrDescriptor+0xe>
 8003080:	200007c0 	.word	0x200007c0
 8003084:	080031a0 	.word	0x080031a0

08003088 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003088:	b508      	push	{r3, lr}
 800308a:	460a      	mov	r2, r1
  if(speed == 0)
 800308c:	b128      	cbz	r0, 800309a <USBD_FS_InterfaceStrDescriptor+0x12>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800308e:	4905      	ldr	r1, [pc, #20]	; (80030a4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8003092:	f7ff fb25 	bl	80026e0 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8003096:	4803      	ldr	r0, [pc, #12]	; (80030a4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003098:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800309a:	4902      	ldr	r1, [pc, #8]	; (80030a4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800309e:	f7ff fb1f 	bl	80026e0 <USBD_GetString>
 80030a2:	e7f8      	b.n	8003096 <USBD_FS_InterfaceStrDescriptor+0xe>
 80030a4:	200007c0 	.word	0x200007c0
 80030a8:	080031ac 	.word	0x080031ac

080030ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030ae:	e003      	b.n	80030b8 <LoopCopyDataInit>

080030b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030b6:	3104      	adds	r1, #4

080030b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030b8:	480a      	ldr	r0, [pc, #40]	; (80030e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030c0:	d3f6      	bcc.n	80030b0 <CopyDataInit>
  ldr r2, =_sbss
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030c4:	e002      	b.n	80030cc <LoopFillZerobss>

080030c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030c8:	f842 3b04 	str.w	r3, [r2], #4

080030cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030d0:	d3f9      	bcc.n	80030c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030d2:	f7ff fe23 	bl	8002d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030d6:	f000 f80f 	bl	80030f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030da:	f7ff fbed 	bl	80028b8 <main>
  bx lr
 80030de:	4770      	bx	lr
  ldr r3, =_sidata
 80030e0:	08003200 	.word	0x08003200
  ldr r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030e8:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 80030ec:	200000fc 	.word	0x200000fc
  ldr r3, = _ebss
 80030f0:	200009c0 	.word	0x200009c0

080030f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030f4:	e7fe      	b.n	80030f4 <ADC1_2_IRQHandler>
	...

080030f8 <__libc_init_array>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	2500      	movs	r5, #0
 80030fc:	4e0c      	ldr	r6, [pc, #48]	; (8003130 <__libc_init_array+0x38>)
 80030fe:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <__libc_init_array+0x3c>)
 8003100:	1ba4      	subs	r4, r4, r6
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	42a5      	cmp	r5, r4
 8003106:	d109      	bne.n	800311c <__libc_init_array+0x24>
 8003108:	f000 f81a 	bl	8003140 <_init>
 800310c:	2500      	movs	r5, #0
 800310e:	4e0a      	ldr	r6, [pc, #40]	; (8003138 <__libc_init_array+0x40>)
 8003110:	4c0a      	ldr	r4, [pc, #40]	; (800313c <__libc_init_array+0x44>)
 8003112:	1ba4      	subs	r4, r4, r6
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	42a5      	cmp	r5, r4
 8003118:	d105      	bne.n	8003126 <__libc_init_array+0x2e>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003120:	4798      	blx	r3
 8003122:	3501      	adds	r5, #1
 8003124:	e7ee      	b.n	8003104 <__libc_init_array+0xc>
 8003126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800312a:	4798      	blx	r3
 800312c:	3501      	adds	r5, #1
 800312e:	e7f2      	b.n	8003116 <__libc_init_array+0x1e>
 8003130:	080031f8 	.word	0x080031f8
 8003134:	080031f8 	.word	0x080031f8
 8003138:	080031f8 	.word	0x080031f8
 800313c:	080031fc 	.word	0x080031fc

08003140 <_init>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr

0800314c <_fini>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr
